<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vedang Manerikar</title>
    <link>https://vedang.me/</link>
    <description>Recent content on Vedang Manerikar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Aug 2017 13:30:00 +0530</lastBuildDate>
    
	<atom:link href="https://vedang.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to use the Clojure REBL with Leiningen, Cider and Emacs</title>
      <link>https://vedang.me/blog/clj-rebl-lein-cider-emacs/</link>
      <pubDate>Wed, 28 Oct 2020 23:18:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/clj-rebl-lein-cider-emacs/</guid>
      <description>Note: This set of instructions only work on Clojure 1.10+, Lein 2.9+ and JDK 11+. Also, REBL requires a license for commercial use.
I didn&amp;rsquo;t find a handy reference to getting started with REBL if your primary workflow is Leiningen/nrepl, so here is the series of things I had to do to get the REBL up and running for myself.
  Download the REBL jar from Cognitect.
  Use lein-localrepo to install the REBL jar to your m2.</description>
    </item>
    
    <item>
      <title>Compiling and Running Emacs 28 from the native-comp feature branch (Ubuntu 20.04).</title>
      <link>https://vedang.me/tinylog/emacs-28-native-comp-ubuntu-20-04/</link>
      <pubDate>Sun, 23 Aug 2020 12:35:23 +0530</pubDate>
      
      <guid>https://vedang.me/tinylog/emacs-28-native-comp-ubuntu-20-04/</guid>
      <description>Quick Note: How to compile Emacs 28.0.5 from source with native compilation: https://t.co/29vNNkGQoU
Native Comp is the work of Andrea Corallo, compiling emacslisp to native code and making it blazing fast! https://t.co/A9oR5mJC9G
&amp;mdash; Vedang Manerikar (@vedang) August 23, 2020  The gist of it, building Emacs from Source git clone https://git.savannah.gnu.org/git/emacs.git cd emacs ./autogen.sh ./configure --with-nativecomp # If everything works make # Test the binary src/emacs -Q # Install the binary sudo make install # If you want to re-build from scratch make distclean Problems during Installation Configure fails because libgccjit fails the smoketest   Ensure that libgccjit is installed and at the latest version (at this point in time, the latest version is 10)</description>
    </item>
    
    <item>
      <title>Doug McIlroy: the UNIX philosophy</title>
      <link>https://vedang.me/notes/doug-mcilroy-unix-philosophy/</link>
      <pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate>
      
      <guid>https://vedang.me/notes/doug-mcilroy-unix-philosophy/</guid>
      <description>Snippet from: The Art of Unix Programming
  Make each program do one thing well. To do a new job, build afresh rather than complicate old programs by adding new features.
  Expect the output of every program to become the input to another, as yet unknown, program. Don&amp;rsquo;t clutter output with extraneous information. Avoid stringently columnar or binary input formats. Don&amp;rsquo;t insist on interactive input.
  Design and build software, even operating systems, to be tried early, ideally within weeks.</description>
    </item>
    
    <item>
      <title>ESR: the UNIX Philosophy</title>
      <link>https://vedang.me/notes/esr-unix-philosophy/</link>
      <pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate>
      
      <guid>https://vedang.me/notes/esr-unix-philosophy/</guid>
      <description>Snippet from: The Art of Unix Programming
 Rule of Modularity Write simple parts connected by clean interfaces. Rule of Clarity Clarity is better than cleverness. Rule of Composition Design programs to be connected to other programs. Rule of Separation Separate policy from mechanism; separate interfaces from engines. Rule of Simplicity Design for simplicity; add complexity only where you must. Rule of Parsimony Write a big program only when it is clear by demonstration that nothing else will do.</description>
    </item>
    
    <item>
      <title>Gene Kim: The Five Ideals of DevOps</title>
      <link>https://vedang.me/notes/gene-kim-the-five-ideals/</link>
      <pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate>
      
      <guid>https://vedang.me/notes/gene-kim-the-five-ideals/</guid>
      <description>Snippet from: The Unicorn Project, along with my own notes
 The First Ideal Locality and Simplicity. Build simple, decoupled systems that can iterate in isolation. The Second Ideal Focus, Flow and Joy. Work in small batches with fast and continuous feedback. The Third Ideal Improvement of Daily Work. Make sure that daily work can be done with minimum impediments. Prioritize productivity over everything else. The Fourth Ideal Psychological Safety. Solving problems requires preventing problems, which requires honesty, which requires the absence of fear.</description>
    </item>
    
    <item>
      <title>Gene Kim: The Four Types of Work</title>
      <link>https://vedang.me/notes/gene-kim-the-four-types/</link>
      <pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate>
      
      <guid>https://vedang.me/notes/gene-kim-the-four-types/</guid>
      <description>Snippet from: The Phoenix Project, along with my own notes
 Business Projects &amp;ldquo;Feature Work&amp;rdquo;. This is the most visible type of work. Internal IT Projects Release Automation, QA Automation, Developer Tooling and other internal enablers. Mostly un-tracked and invisible, but crucial to long-term success. Updates and Changes Generally generated from above to categories of work. Introduces delay as breadth of existing surface area increases. Unplanned Work Fire-fighting at all levels of the company.</description>
    </item>
    
    <item>
      <title>Gene Kim: The Three Ways of doing excellent Work</title>
      <link>https://vedang.me/notes/gene-kim-the-three-ways/</link>
      <pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate>
      
      <guid>https://vedang.me/notes/gene-kim-the-three-ways/</guid>
      <description>Snippet from: The Phoenix Project, along with my own notes
 Flow Maximizing the rate of flow of work is the key to success. Limiting the work in progress is the fastest way to achieve Flow. Fast Feedback Setup systems to get fast feedback at every stage of work, from concept through shipping to maintaining in production. Experimentation and Learning Keep dedicated time for experiments, at every level of the company.</description>
    </item>
    
    <item>
      <title>L Peter Deutsch: The Fallacies of Distributed Computing</title>
      <link>https://vedang.me/notes/l-peter-deutsch-the-fallacies-of-distributed-computing/</link>
      <pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate>
      
      <guid>https://vedang.me/notes/l-peter-deutsch-the-fallacies-of-distributed-computing/</guid>
      <description>Snippet from: The Wikipedia Article, along with my own notes
 The network is reliable Think about error-handling on network failures. Use the following patterns: Timeouts, Retries, Circuit breakers, Graceful Degradation. Latency is zero Think about bandwidth requirements and packet loss. Use the following patterns: Small payloads, Compression, Asynchronous Communication, Perceived Progress, Timeouts, Graceful Degradation. Bandwidth is infinite The same as above. Think explicitly about bottlenecks in Network traffic. Use the following patterns: Caching, Etags.</description>
    </item>
    
    <item>
      <title>Rob Pike: Rules of Programming</title>
      <link>https://vedang.me/notes/rob-pike-rules/</link>
      <pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate>
      
      <guid>https://vedang.me/notes/rob-pike-rules/</guid>
      <description>Snippet from: Notes on C Programming
 No Speed Hacks You can&amp;rsquo;t tell where a program is going to spend its time. Bottlenecks occur in surprising places, so don&amp;rsquo;t try to second guess and put in a speed hack until you&amp;rsquo;ve proven that&amp;rsquo;s where the bottleneck is. Measure before tuning Don&amp;rsquo;t tune for speed until you&amp;rsquo;ve measured, and even then don&amp;rsquo;t unless one part of the code overwhelms the rest. No Fancy Algorithms Fancy algorithms are slow when n is small, and n is usually small.</description>
    </item>
    
    <item>
      <title>Tim Peters: The Python Way</title>
      <link>https://vedang.me/notes/tim-peters-the-python-way/</link>
      <pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate>
      
      <guid>https://vedang.me/notes/tim-peters-the-python-way/</guid>
      <description>Snippet from: The Python Mailing List
  Beautiful is better than ugly.
  Explicit is better than implicit.
  Simple is better than complex.
  Complex is better than complicated.
  Flat is better than nested.
  Sparse is better than dense.
  Readability counts.
  Special cases aren&amp;rsquo;t special enough to break the rules.
  Although practicality beats purity.
  Errors should never pass silently.</description>
    </item>
    
    <item>
      <title>The Programmer&#39;s Guide to Wisdom</title>
      <link>https://vedang.me/tinylog/programmer-guide/</link>
      <pubDate>Sat, 22 Aug 2020 17:15:00 +0530</pubDate>
      
      <guid>https://vedang.me/tinylog/programmer-guide/</guid>
      <description>This poster captures timeless advice on programming, I keep a copy on my desk to read whenever I can.
Over the weekend, I created a poster for my desk. It captures timeless best practices and advice on programming and software design. Presenting it here, in the hopes that it&amp;#39;ll be useful to others as well. Features: @esrtweet, Doug McIlroy, @rob_pike and @RealGeneKim pic.twitter.com/Lj2kUqwq2J
&amp;mdash; Vedang Manerikar (@vedang) August 10, 2020  I collect such deeply useful and universal advice under the tag wisdom, if you want to read more posts of this kind.</description>
    </item>
    
    <item>
      <title>Lazy Weekend Viewing: Preventing the collapse of civilization</title>
      <link>https://vedang.me/notes/preventing-the-collapse-of-civilization/</link>
      <pubDate>Sun, 12 Apr 2020 18:20:00 +0530</pubDate>
      
      <guid>https://vedang.me/notes/preventing-the-collapse-of-civilization/</guid>
      <description>&amp;ldquo;Preventing the Collapse of Civilization&amp;rdquo; is an excellent talk by Jonathan Blow (of Braid fame) at DevGAMM 2019. It&amp;rsquo;s inspiring and I recommend you make the time to see it. My notes below:
Summary  It is a myth that technology only advances. We&amp;rsquo;ve often seen significant backward slides in tech. (Lots of examples to illustrate this point) Software is in decline. Both software robustness and programmer productivity is declining. (Lots of examples to illustrate this point) We need to fight complexity and strive for simplicity in every step if we want to battle degradation and loss of capability.</description>
    </item>
    
    <item>
      <title>Lily&#39;s Recipes</title>
      <link>https://vedang.me/projects/lilys-recipes/</link>
      <pubDate>Sun, 05 Apr 2020 19:03:00 +0530</pubDate>
      
      <guid>https://vedang.me/projects/lilys-recipes/</guid>
      <description>Lily is a lifelong cooking enthusiast. She collected, cooked, commented on, and critiqued thousands of recipes over the years - and she did it before the age of the telephone (let alone the TV, the computer or the internet).
  Figure 1: My Ajji - Lila Manerikar :)
  The photo you see here is my 96 year old ajji (grandmother) Lila Manerikar - lovingly referred to as Lily by her numerous grandchildren.</description>
    </item>
    
    <item>
      <title>I have questions about COVID-19</title>
      <link>https://vedang.me/projects/i-have-questions-about-covid19/</link>
      <pubDate>Mon, 23 Mar 2020 10:10:00 +0530</pubDate>
      
      <guid>https://vedang.me/projects/i-have-questions-about-covid19/</guid>
      <description>This page is a demo page, built to showcase how we can use bots to answer common questions that people have about COVID-19. This is a great way for folks to get up-to-date information about the pandemic while staying at home.
To get started, click on the chat widget on the bottom right corner of the screen. Follow the instructions.
This bot is built on guidelines and bots published by the World Health Organization and the Indian Govt.</description>
    </item>
    
    <item>
      <title>Lazy Weekend Reading: A love letter to Clojure</title>
      <link>https://vedang.me/notes/love-letter-to-clojure/</link>
      <pubDate>Sun, 13 Oct 2019 23:02:00 +0530</pubDate>
      
      <guid>https://vedang.me/notes/love-letter-to-clojure/</guid>
      <description>I had no idea that Gene Kim, author of three books that have garnered wide-spread public acclaim, was doing Clojure programming. (They are DevOps Handbook, Phoenix Project, and Accelerate &amp;ndash; we&amp;rsquo;ve ordered them recently for the Helpshift Library). He published a love-letter to Clojure this weekend, and I think it is an absolute must-read for all programmers (whether you write Clojure or not). The blog-post covers the following areas:
General software philosophy  Choose tools that are good to think with Most bugs are due to programmers not understanding all the possible states their code may execute in.</description>
    </item>
    
    <item>
      <title>Writing a good status update</title>
      <link>https://vedang.me/blog/writing-a-good-status-update/</link>
      <pubDate>Tue, 06 Aug 2019 07:49:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/writing-a-good-status-update/</guid>
      <description>We share written status updates within the team on a weekly basis (every Monday). I wrote this article to explain what these status updates should look like, and I think it&amp;rsquo;s useful enough to publish publicly. Here goes:
What is the purpose of status updates?  Let your manager know what you have achieved last week. Let your co-workers know what you have achieved this week. Reflect on your progress and pace yourself.</description>
    </item>
    
    <item>
      <title>Lazy Weekend Viewing: GOJEK&#39;s 10x Engineer - Truth or Myth?</title>
      <link>https://vedang.me/notes/gojek-10x-engineering/</link>
      <pubDate>Sat, 20 Jul 2019 07:39:00 +0530</pubDate>
      
      <guid>https://vedang.me/notes/gojek-10x-engineering/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Engineering quality is paramount. Focus on &lt;a href=&#34;https://dave.cheney.net/2019/07/09/clear-is-better-than-clever&#34;&gt;clean and clear code&lt;/a&gt;.
Code is the primary medium of communication for any engineer.
Write beautiful code and hold people to high standards.&lt;/li&gt;
&lt;li&gt;Adding head count has vast hidden costs and often brings down
output. The reason for this is the exponential increase in
communication required to align everyone to common goals.&lt;/li&gt;
&lt;li&gt;Similarly, pods cannot scale unless they can own small,
independent components.&lt;/li&gt;
&lt;li&gt;Monoliths are normal and good when the company is small.
Refactoring the monolithic model into different components allows
us to scale pods and org.&lt;/li&gt;
&lt;li&gt;Carve monoliths only when it hits critical mass. Then, identify
the pain and pull it out into it&amp;rsquo;s own pod.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Relationship as a service&amp;rdquo; or &amp;ldquo;Please get this done for me over
and above other stuff on your plate&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Traffic congestion&amp;rdquo; (A team which is too busy) and structural
failure can lead to the impression that the system is
bureaucratic and political.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Criteria when hiring Engineers
&lt;ul&gt;
&lt;li&gt;Computer science (Can computers understand your code?)
&lt;ul&gt;
&lt;li&gt;Ability to grasp large complex systems&lt;/li&gt;
&lt;li&gt;Understanding of implications of design choices on that system.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Software Engineering (Can humans understand your code?)
&lt;ul&gt;
&lt;li&gt;How well do you communicate through your code? This is the
metric that enables building &lt;strong&gt;good&lt;/strong&gt; systems.&lt;/li&gt;
&lt;li&gt;The hygiene you show in code is the hygiene you will enforce
on others.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Good behavioral traits (Can you grow?)
&lt;ul&gt;
&lt;li&gt;Curious&lt;/li&gt;
&lt;li&gt;Wants to learn&lt;/li&gt;
&lt;li&gt;Can accept feedback&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Strong opinions, Weakly held.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Pride without attachment.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Find the full video &lt;a href=&#34;https://www.youtube.com/watch?v=He0XBBfCEVk&#34;&gt;here&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;The rest of this post is detailed notes on the video&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Problems in my brand new System76 Oryx Pro laptop</title>
      <link>https://vedang.me/blog/problems-in-system76-oryx-pro/</link>
      <pubDate>Fri, 31 May 2019 22:51:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/problems-in-system76-oryx-pro/</guid>
      <description>Important Note I&amp;rsquo;m enjoying using a Linux laptop after years of development on the Macbook, and this post is more a list of issues I personally faced on moving to Linux after 7 years of development on the Macbook. I&amp;rsquo;d written a similar thing when I&amp;rsquo;d moved to the Macbook for the first time. Hopefully, this will help someone else moving to this particular laptop. This is not a &amp;ldquo;look, linux sux&amp;rdquo; post.</description>
    </item>
    
    <item>
      <title>Simulating the Passport Seva Kendra using Clojure</title>
      <link>https://vedang.me/blog/simulating-the-passport-seva-kendra/</link>
      <pubDate>Sat, 15 Dec 2018 19:56:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/simulating-the-passport-seva-kendra/</guid>
      <description>&lt;p&gt;&lt;em&gt;Cross-posted from my post on the &lt;a href=&#34;https://medium.com/helpshift-engineering/simulating-the-passport-seva-kendra-using-clojure-fd88c12dde8c&#34;&gt;Helpshift Engineering Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A year ago, I went to the Passport Seva Kendra (PSK) in Mundhwa, Pune
to get my passport renewed. At the time, the government had revamped
this process and made it a simple, step-in/step-out painless affair.
Unfortunately for me, I hit an edge-case in the system and took much
longer than expected to complete. I was there for close to 4 hours. I
used this time to observe the behavior of the PSK and think about
ways to improve the applicant experience. I thought it was an
interesting problem to solve and write about.&lt;/p&gt;
&lt;p&gt;Recently, my wife booked an appointment at the PSK to renew &lt;span class=&#34;underline&#34;&gt;her&lt;/span&gt;
passport and this provided the spark I needed to write about it. So
here we are, a year later, talking about the passport renewal process
at the PSK.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tinylog: Mbsync: Error: Channel &lt;x&gt; Is Locked</title>
      <link>https://vedang.me/tinylog/mbsync-channel-is-locked/</link>
      <pubDate>Wed, 11 Oct 2017 19:22:00 +0530</pubDate>
      
      <guid>https://vedang.me/tinylog/mbsync-channel-is-locked/</guid>
      <description>You may come across the following error when running mbsync :
Error: channel :&amp;lt;channel-name&amp;gt;-remote:&amp;lt;folder&amp;gt;-:&amp;lt;channel-name&amp;gt;-local:&amp;lt;folder&amp;gt; is locked This happens when there is another mbsync instance running in parallel and it has taken a lock on the particular folder. In my case, I am running mbsync via a cron-job, and it tends to leave dead instances around if the laptop sleeps during a run. Kill all instances of mbsync and restart the process and you should be fine!</description>
    </item>
    
    <item>
      <title>Imagine Working in Engineering at Helpshift</title>
      <link>https://vedang.me/blog/imagine-working-in-engineering-at-helpshift/</link>
      <pubDate>Thu, 07 Sep 2017 07:27:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/imagine-working-in-engineering-at-helpshift/</guid>
      <description>&lt;p&gt;&lt;em&gt;Cross-posted from my interview published on &lt;a href=&#34;https://medium.com/@helpshift/image-ine-working-in-engineering-at-helpshift-8818247e2188&#34;&gt;Helpshift&amp;rsquo;s Medium blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name: Vedang Manerikar&lt;/li&gt;
&lt;li&gt;Current Role: Principal Engineering Manager, Backend&lt;/li&gt;
&lt;li&gt;How long you have been with Helpshift?: 7 years&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title> </title>
      <link>https://vedang.me/about/</link>
      <pubDate>Sat, 19 Aug 2017 13:30:00 +0530</pubDate>
      
      <guid>https://vedang.me/about/</guid>
      <description>Hi! I&amp;rsquo;m Vedang. I live in Pune, India and work at Helpshift. Now a days, I&amp;rsquo;m an Engineering Manager working on improving processes and workflows within the Helpshift Core backend team with the help of my team mates. Previously, I was an individual contributor and helped design and write some of the code that runs Helpshift.
I&amp;rsquo;m passionate about programming, and some of my work can be found on GitHub.</description>
    </item>
    
    <item>
      <title>Notes and Reading Material on the Mahabharata</title>
      <link>https://vedang.me/blog/notes-and-reading-material-on-the-mahabharat/</link>
      <pubDate>Fri, 21 Sep 2012 20:55:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/notes-and-reading-material-on-the-mahabharat/</guid>
      <description>&lt;p&gt;&lt;em&gt;Cross-posted from my note: &lt;a href=&#34;http://www.quora.com/Vedang-Manerikar/The-Mahabharata/Notes-and-Reading-material-on-the-Mahabharata&#34;&gt;Notes and Reading Material on the
Mahabharata&lt;/a&gt; on &lt;a href=&#34;http://quora.com&#34;&gt;Quora&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;People have shown some interest in reading material for the
Mahabharata, this post should save me from repeatedly typing the same
things.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Draupadi and the Pandavas</title>
      <link>https://vedang.me/blog/draupadi-and-the-pandavas/</link>
      <pubDate>Fri, 21 Sep 2012 19:17:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/draupadi-and-the-pandavas/</guid>
      <description>&lt;p&gt;&lt;em&gt;Cross-posted from my answer to the question: &lt;a href=&#34;http://www.quora.com/Mythology/What-was-the-relationship-between-Draupadi-and-the-Pandavas-like/answer/Vedang-Manerikar&#34;&gt;What was the
relationship between Draupadi and the Pandavas like?&lt;/a&gt; on &lt;a href=&#34;http://quora.com&#34;&gt;Quora&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Draupadi&amp;rsquo;s relationship with the Pandavas is complex and at the heart
of the Mahabharat.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Krishna in the Mahabharat</title>
      <link>https://vedang.me/blog/krishna-in-the-mahabharat/</link>
      <pubDate>Thu, 20 Sep 2012 20:18:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/krishna-in-the-mahabharat/</guid>
      <description>&lt;p&gt;&lt;em&gt;Cross-posted from my answer to the question: &lt;a href=&#34;http://www.quora.com/Mahabharata/Why-is-Lord-Krishna-called-the-master-of-finesse-in-the-Mahabharat/answer/Vedang-Manerikar&#34;&gt;Why is Lord Krishna
called the master of finesse in the Mahabharat?&lt;/a&gt; on &lt;a href=&#34;http://quora.com&#34;&gt;Quora&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I will attempt to answer this, but my answer is going to be
controversial. Please keep in mind that it is not my intention to
offend anyone.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Composability and Compojure</title>
      <link>https://vedang.me/blog/composability-and-compojure/</link>
      <pubDate>Thu, 23 Feb 2012 23:58:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/composability-and-compojure/</guid>
      <description>&lt;p&gt;&lt;em&gt;Caveat&lt;/em&gt;: This post needs some rudimentary knowledge of Compojure.
Compojure is a web framework for Clojure, and if you don&amp;rsquo;t understand
what that means, then you should probably head over to the
&lt;a href=&#34;https://github.com/weavejester/compojure/wiki&#34;&gt;Compojure docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Compojure exposes us to a beautifully &lt;span class=&#34;underline&#34;&gt;composable&lt;/span&gt; abstraction, and
this post is an attempt to show why that is a great thing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Switch Statements in Python</title>
      <link>https://vedang.me/blog/switch-statements-in-python/</link>
      <pubDate>Sun, 07 Aug 2011 13:21:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/switch-statements-in-python/</guid>
      <description>&lt;p&gt;Today I went through some old Python code and noticed this pattern
through out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;response, data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; somefunc()
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;this&amp;#34;&lt;/span&gt;:
    do_this_with(data)
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;that&amp;#34;&lt;/span&gt;:
    do_that_with(data)
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;huh&amp;#34;&lt;/span&gt;:
    duh(data)
    ;; lots more elifs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    prevent_horrible_crash(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code should ideally have been a switch-case, but Python does not
support a &lt;code&gt;switch&lt;/code&gt; statement.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why I Quit StumpWM</title>
      <link>https://vedang.me/blog/why-i-quit-stumpwm/</link>
      <pubDate>Thu, 04 Aug 2011 13:41:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/why-i-quit-stumpwm/</guid>
      <description>&lt;p&gt;After using &lt;a href=&#34;http://www.nongnu.org/stumpwm/&#34;&gt;StumpWM&lt;/a&gt; for nearly a
year, I&amp;rsquo;m finally quitting and moving back to Gnome. I came to love
StumpWM&amp;rsquo;s minimalistic approach, and this isn&amp;rsquo;t an easy decision. So
why am I doing it?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reboot</title>
      <link>https://vedang.me/blog/reboot/</link>
      <pubDate>Sat, 30 Jul 2011 14:25:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/reboot/</guid>
      <description>&lt;p&gt;Once upon a time I had a blog. Then one day I ran out of motivation,
inclination, desire, drive, whatnot to post to that blog. I never
really ran out of content though. At least, I think not.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>