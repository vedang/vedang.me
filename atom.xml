<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Vedang Manerikar]]></title>
  <link href="http://vedang.me/atom.xml" rel="self"/>
  <link href="http://vedang.me/"/>
  <updated>2012-09-21T23:54:57+05:30</updated>
  <id>http://vedang.me/</id>
  <author>
    <name><![CDATA[Vedang Manerikar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Krishna in the Mahabharata]]></title>
    <link href="http://vedang.me/weblog/Mahabharata/2012/09/21/krishna-in-the-mahabharata/"/>
    <updated>2012-09-21T22:33:00+05:30</updated>
    <id>http://vedang.me/weblog/Mahabharata/2012/09/21/krishna-in-the-mahabharata</id>
    <content type="html"><![CDATA[<p><em>Cross-posted from my answer to the question: <a href="http://www.quora.com/Mahabharata/Why-is-Lord-Krishna-called-the-master-of-finesse-in-the-Mahabharat/answer/Vedang-Manerikar">Why is Lord Krishna called the master of finesse in the Mahabharat?</a> on <a href="http://quora.com">Quora</a></em></p>

<p>I will attempt to answer this, but my answer is going to be controversial. Please keep in mind that it is not my intention to offend anyone.</p>

<p>Alright, let&#8217;s start with some ground rules. For the length of this answer, consider that Krishna is not Lord Krishna, the god and that the Mahabharat is not a religious text revered by millions. Instead, let us analyze the Mahabharat as if it is a (ridiculously good) fantasy story, and Krishna is a central character in this story.</p>

<h3>Introduction and back-story:</h3>

<p>Krishna is introduced to us early on, as a cousin of the Pandavas. He is accomplished, wise, and powerful in his own right (unlike Pandavas or Kauravas at this point, who are squabbling children). This is because he has overthrown Kamsa, the King of Surasena kingdom, native land of the Yadavas. However, he has multiple problems of his own. Firstly, he is a cowherd, not royalty. The Yadavas rule by council, not by king. Thus, even though Krishna is the leader of the Yadavas, he is not equal to royalty. Further, Kamsa was Jarasandh&#8217;s Senapati. Jarasandh is the emperor of India. Every other dynasty, including the Kurus, pays obeisance to him. This doesn&#8217;t leave Krishna with very many allies. That Krishna is capable and a political genius (at such a young age) is evident because Jarasandh has been unable to crush him outright. But Krishna has now fought 18 wars with Jarasandh, and has slowly lost territory to him. He has been forced to leave his land and move to the island of Dwarka. He needs help.</p>

<p>Guess who else need help? The Pandavas. They are staking a claim to the throne of Hastinapur on extremely untenable grounds: It is an open secret that Pandu was impotent. Who then, are these children, arrived from nowhere? Here is Krishna&#8217;s opportunity. The Pandavas will oppose Duryodhana, who is Dhritarashtra&#8217;s son. Dhritarashtra is politically aligned with Jarasandh. Thus, Pandavas are going against Jarasandh himself. Krishna aligns himself with the Pandavas.</p>

<!--more-->


<h3>Jarasandh vadh and the Rajsuya yagna:</h3>

<p>I&#8217;ll skip some details here, because I don&#8217;t intend to reproduce the Mahabharat entirely. Suffice to say that Krishna and Arjuna are the closest of friends now. Krishna has helped Arjuna earn multiple celestial weapons, he has convinced Drupad to let Draupadi marry the Pandavas, he has orchestrated the building of the Mayasabha in Indraprastha.</p>

<p>The Rajsuya yagna is his chance to strike against Jarasandh. He convinces Yudhisthir that he needs to perform the yagna to establish his supremacy over India. Who stands in Yudhishthir&#8217;s way? The current emperor of India, Jarasandh. So do they declare war on Magadh? No. Krishna, Arjuna and Bhima sneak into Magadh, and challenge Jarasandh to single combat. Bhima kills Jarasandh, after which Krishna installs Jarasandh&#8217;s son Sahadev onto the throne of Magadh. Thus, he eliminates his biggest enemy, gains access to a sizeable army, and makes multiple allies when he frees the political prisoners of Jarasandh. Who else stands in his way? Shishupal, king of Chedi, his lifelong enemy, and the Senapati of Jarasandh&#8217;s army. Yudhishthir invites Shishupal to the Rajsuya yagna. Krishna is the guest of honor for this yagna, over and above celebrated people like Bhisma and Drona. Krishna lets Shishupal berate and belittle him for a long time&#8211;long enough to convince everyone that Shishupal is an asshole of the first degree. Then he calmly beheads him. No battle, no challenge to fight to the death, nothing. In a single stroke, in front of enough witnesses to assert that Shishupal truly deserved it, the Senapati of Jarasandh is gone.</p>

<p>Who else is Krishna&#8217;s enemy? Duryodhan, friend of Jarasandh, and a political genius in his own right. Duryodhan has befriended Balaram, Krishna&#8217;s elder brother and the most important person on the Yadava council after Krishna himself. Krishna did not foresee this, but Balaram teaches the mace to Bhima and Duryodhana, and he is impressed with Duryodhana. Duryodhan will not be so easy to eliminate. We will deal with him later.</p>

<h3>Subhadhra and Samba:</h3>

<p>Balaram promises Subhadhra to Duryodhana in marriage. If this comes to pass, the two families will be much too closely linked for Krishna&#8217;s liking. Lucky then, that Arjuna is there to whisk her away.</p>

<p>However, this is one instance where Krishna&#8217;s intentions do not come to pass. Krishna&#8217;s own son, Samba, is fool enough to fall in love with Duryodhana&#8217;s daughter Laxamani. He tries to whisk her away just like Arjuna did with Subhadhra. However, he is no Arjuna, and Duryodhana is no fool. He is caught and put behind bars. Duryodhana announces that Samba will be put to death. Even in this situation, Krishna cannot come to negotiate with Duryodhan. This is a political loss, he stands to lose face. Instead he pleads with Balaram to go on his behalf. Balaram successfully negotiates with Duryodhana, promising him support in battle, and brings Samba and Laxamani back to Dwarka. The families are intertwined. Krishna will face a much tougher task getting support from the Yadavas against Duryodhana now.</p>

<h3>Preparations for the Kurukshetra war:</h3>

<p>Krishna does not have an option. He is over-ruled by his council, and pledges his army to Duryodhana. However he says that he will fight on behalf of the Pandavas, because they have asked him for help too. He makes it sound as innocuous as possible: &#8220;I will only be a charioteer. I will not take up arms. I only wish to accompany my friend Arjuna. What can little old me do?&#8221; And now Duryodhana makes a fatal mistake. He underestimates Krishna. He agrees to Krishna&#8217;s conditions.</p>

<p>Krishna plays his master-stroke early on. He is fully aware of the capabilities of his army. If Balaram enters the battlefield on Duryodhana&#8217;s side, it is game over for the Pandavas. So Krishna convinces Balaram that this war will be full of adharma (he is not wrong on that count). A man of Balaram&#8217;s accomplishments should not taint his soul by participating in such a war. He should instead go on a pilgrimage to the holy sites in India. <em>This</em> is Krishna&#8217;s greatest political maneuver in the Mahabharat. With Balaram gone, Kritivarma becomes the Senapati of the Yadava army. It is a testament to the quality of Yadava soldiers that Kritivarma and Satyaki (who is the only Yadava to fight for the Pandavas) are two of the 10 people to survive the war.</p>

<p>When Krishna goes to Hastinapur to sue for peace, one last time, he plays another closely guarded card. He takes Karna aside and tells him of his parentage. He then tries to sway Karna by promises of power and rule. He even offers Draupadi as a final perquisite. Karna turns him down. Luckily for Krishna, Bhishma too has his own agenda. He knows the truth of Karna&#8217;s birth, and does not wish for him to fight his brothers. So he insults Karna in the war council, and tells him he is only fit to fight ardha-rathis. Karna swears not to enter the battlefield until Bhishma falls. Thus the Pandavas are free of the terror of Karna for 10 days. When Karna will finally enter the battlefield on the 11th day, Krishna will try again. He will send Kunti to Karna, to convince Karna to switch, and when that fails, to beg for the lives of her sons. Thus, Krishna will ensure that 4 sons of Kunti are safe from the wrath of Karna.</p>

<h3>Machinations in the War:</h3>

<p>There are many, many things that Krishna does on the battlefield, but most people are already aware of them. Quickly then, the highlights:</p>

<ul>
<li>  Convince Arjuna to fight.</li>
<li>  Convince the Pandavas that Bhishma is slaughtering their armies and needs to fall</li>
<li>  Protect Arjuna from himself (the Abhimanyu/Jayadrath incident)</li>
<li>  Formulate and execute the plan to slay Drona (<em>naro va kunjaro va</em>)</li>
<li>  Tell the Pandavas how to counter Ashwatthama&#8217;s multiple celestial weapons</li>
<li>  Stop the Pandavas from infighting on multiple occasions

<ul>
<li> When Dhrishtadyumna chops off Drona&#8217;s head, Arjuna sees red</li>
<li> When Karna defeats and humiliates Yudhisthir, Yudhisthir runs
 back to his tent. He blames Arjuna of incompetence in killing
 Karna with such vigor, that Arjuna pulls out Gandiva to kill
 Yudhishthir himself. Krishna cools things down.</li>
</ul>
</li>
<li>  Use Ghatotkach as a pawn to rid Karna of his celestial Shakti.

<ul>
<li> When Ghatotkach dies, the Pandava camp is in mourning. Not
 Krishna though. He dances in joy, claiming that &#8220;finally, Karna
 is surmountable&#8221;</li>
</ul>
</li>
<li>  Convince Arjuna to kill Karna when he is unarmed and on foot</li>
<li>  Gesture Bhima to hit Duryodhana in the thigh, blatantly against the
  rules of mace battle.</li>
<li>  Stop Balaram from slaughtering Bhima on the spot for cheating.

<ul>
<li> Balaram is back from his pilgrimage in time to watch the battle
 between Duryodhana and Bhima. Krishna has to hold him in a bear
 hug when Bhima breaks Duryodhana&#8217;s thigh.</li>
</ul>
</li>
</ul>


<p><img src="http://vedang.me/images/arjuna-krishna.jpg" title="&#34;Krishna: The mastermind&#34; (This image does not belong to me)" alt="&#34;Krishna: The mastermind&#34; (This image does not belong to me)"></p>

<p>In summary, the Pandavas are bumbling fools who do not stand a snowball&#8217;s chance in hell without Krishna to guide them on every step. In return, they revere Krishna, and proclaim that he is their god, their spiritual leader. Krishna enters the fray to be royalty, ends up becoming a God.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Draupadi and the Pandavas]]></title>
    <link href="http://vedang.me/weblog/Mahabharata/2012/09/21/draupadi-and-the-pandavas/"/>
    <updated>2012-09-21T21:02:00+05:30</updated>
    <id>http://vedang.me/weblog/Mahabharata/2012/09/21/draupadi-and-the-pandavas</id>
    <content type="html"><![CDATA[<p><em>Cross-posted from my answer to the question: <a href="http://www.quora.com/Mythology/What-was-the-relationship-between-Draupadi-and-the-Pandavas-like/answer/Vedang-Manerikar">What was the relationship between Draupadi and the Pandavas like?</a> on <a href="http://quora.com">Quora</a></em></p>

<p>Draupadi&#8217;s relationship with the Pandavas is complex and at the heart of the Mahabharat.</p>

<h3>Draupadi and Arjuna</h3>

<p>Let&#8217;s jump right in with the most important relationship: Draupadi and Arjuna.</p>

<p>Of the five Pandavas, Draupadi favors Arjuna the most. She is in love with him, whereas the others are in love with her. Arjuna has won her in the Swayamvar, Arjuna is her Lord, and she is devoted to him. <sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></p>

<p>On the other hand, she is not Arjuna&#8217;s favorite wife. Arjuna does not like sharing her with 4 other men (conjecture on my part). Arjuna&#8217;s favorite wife is Subadhra, Krishna&#8217;s half-sister. He also dotes on Abhimanyu (his son with Subadhra) over and above his sons from Draupadi and Chitrangada (Here is a quick question: Can you name his sons from Draupadi and Chitrangada? Off the top of your head? Exactly). All of Draupadi&#8217;s husbands married other women, but the only time Draupadi gets upset and distraught is when she learns of Arjuna&#8217;s marriage to Subadhra. Subadhra has to go to Draupadi dressed as a maid, just to assure her that she (Subadhra) will always be beneath Draupadi in status. <sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup></p>

<!--more-->


<h3>Draupadi and Yudhisthir</h3>

<p>Now let&#8217;s see the reason why Draupadi&#8217;s life is a shambles, why she is the most cursed woman of her time, and one of the most important reasons behind the Mahabharat war: Draupadi&#8217;s marriage to Yudhisthir.</p>

<p>Here is something we need to understand first: Yudhisthir is a bastard. This is not to be held against him - all Mahabharat characters are gray - but people tend to forget this bit. Yudhisthir <em>does not</em> win Draupadi in the Swayamvar, he has no right to her. He lusts for her, he cannot bear seeing her everyday and not be able to have her. So he takes a small chance that fate throws his way, when Kunti says, &#8220;Share whatever you have between yourselves&#8221;, and bullies Draupadi and his brothers into the weird &#8220;Lets all marry her&#8221; situation. Bhima does not like this, he claims that it is not right and that people will laugh at them. Yudhisthir tells him of Rishis who have done this before, and that it is accepted in Dharma.<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup> He then rushes forward and says that since he is the eldest, he must get &#8220;first dibs&#8221; with Draupadi. (Sorry to be crude here, but I tell it like I read it.) The brothers marry her according to age, eldest to youngest.</p>

<p>Then, Yudhisthir calls an assembly with his brothers and tells them the story of 2 powerful rakshasas, Sunda and Upasunda <sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>, whose love for the same woman led them to destroy each other. He says that the lesson to learn here is that the brothers must be careful when sharing Draupadi. She must be with one brother for a set period of time, and during this period the other brothers cannot touch her (carnally, that is). Yudhisthir decides that Draupadi will live for 1 year with each brother and that since he is the eldest, she will start the cycle with him.</p>

<p>Yudhisthir doesn&#8217;t stop with this. He knows that Draupadi loves Arjuna. He does not want her to tempt him into breaking the rules. Hence he says that the brother who breaks this rule will have to go into exile for 12 years (seriously?). Further, the same punishment will apply if any brother happens to disturb another when he is carnally engaged with Draupadi. Ouch. This punishment actually comes into play when Arjuna disturbs Yudhisthir and Draupadi. Arjuna has to retrieve his weapons from the armory, in order to help a poor Brahmin whose cows have been stolen by thieves. Guess where Yudhisthir and Draupadi are doing it? That&#8217;s right. The Armory. <sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup></p>

<p>Arjuna departs on his 12 year tour of India, where he visits his father Indra, gets cursed by Urvashi, learns a lot of new skills from multiple teachers (Shiva, Indra etc), meets and marries Subadhra, followed by Chitrangada, etc. However, what happens to the year that he is to spend with Draupadi? It reverts back to Yudhisthir, who promises to care for Draupadi on Arjuna&#8217;s behalf. Naturally.</p>

<h3>Draupadi and Bhima</h3>

<p>After that morose tale of manipulation, let&#8217;s visit to a slightly more cheerful tale of manipulation: Draupadi and Bhima</p>

<p>Bhima is silly putty in Draupadi&#8217;s hands. Of all her husbands, he is the one who loves her the most. He fulfills her every request, he cannot bear to see her hurt.</p>

<p>Who brings her flowers from Kuber&#8217;s garden? Bhima. Who cries because his beautiful wife will have to serve as a Sairandhri (maid) to Queen Sudeshna of Matsya? Bhima. Who kills a 100 Kauravas to avenge the insult to Draupadi? Bhima. Who does Draupadi run to when she is molested by Keechak in Matsya kingdom? Bhima.</p>

<p>The other Pandavas are not under Draupadi&#8217;s thumb. She is prone to outbursts of rage, she makes unreasonable, unwise demands. When she wants Keechak killed for molesting her, Yudhisthir tells her that it would expose their presence in Matsya kingdom, and advises her to &#8220;live with it&#8221;. (Model husband that). Bhima simply walks up to Keechak in the middle of the night and tears him limb from limb. No questions asked.<sup id='fnref:6'><a href='#fn:6' rel='footnote'>6</a></sup></p>

<p>Draupadi shows us Bhima&#8217;s human side. He is a savage monster with others, but he is always and only tender when it comes to Draupadi.</p>

<h3>Draupadi with Nakul and Sahadev</h3>

<p>As with most of the Mahabharat, Nakul and Sahadev don&#8217;t really matter here. I haven&#8217;t read any version of the Mahabharat where Nakul and Sahadev have any role of substance. In reality, Nakul and Sahadev are more loyal to Yudhisthir than anyone else. They don&#8217;t share father or mother with Yudhisthir, yet they follow him everywhere and do exactly as he asks. They could have gone and ruled over Madradesh (their birthright through Madri), and lived a life of luxury and ease, but they stuck with their brother through thick and thin. Makes one appreciate them a little bit more.</p>

<p><img src="http://vedang.me/images/Draupadi-and-Krishna.jpg" title="&#34;Draupadi: The Curse of Beauty&#34; (This image does not belong to me)" alt="&#34;Draupadi: The Curse of Beauty&#34; (This image does not belong to me)"></p>

<p>In summary, Draupadi&#8217;s curse is the curse of beauty. She is the object of every man&#8217;s lust, but no one cares much for what she desires or feels. Her husbands gamble her away as if she were property. When Dusshasana strips her in view of a full court, she has to beg Krishna to save her. Her husbands don&#8217;t lift a finger. Even at the end of their 13 year exile, the Pandavas are not intent on war. They worry that the losses in the Kurukshetra war will be too big to warrant it. Draupadi has to turn to her friend, Krishna, to heal her soul. Krishna promises her: <sup id='fnref:7'><a href='#fn:7' rel='footnote'>7</a></sup></p>

<blockquote><p>&#8220;Soon wilt thou, O Draupadi, behold the ladies of Bharata&#8217;s race weep as thou dost. Even they, O timid one, will weep like thee, their kinsmen and friends being slain. They with whom, O lady, thou art angry, have their kinsmen and warriors already slain&#8230;. I will accomplish all this.&#8221;</p></blockquote>


<p>And thus comes about the Mahabharat war.</p>

<h4>Some references for further reading, clarification etc</h4>

<div class="footnotes">
    <ol>
        <li id='fn:1'><a href="http://pastebin.com/bgbrjnne">Draupadi favors Arjuna</a> Note that it is Bhima who questions why Draupadi fell, not Arjuna. <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'><a href="http://pastebin.com/ngMNJiFP">Subadhra pacifies Draupadi</a> <a href='#fnref:2' rev='footnote'>↩</a></li><li id='fn:3'><a href="http://pastebin.com/TiW5w3zi">Conformable to virtue</a> Note his sentence construction: &#8220;My mother commands it, and my heart approves&#8221; <a href='#fnref:3' rev='footnote'>↩</a></li><li id='fn:4'><a href="http://pastebin.com/WbMLtEmM">The Story of Sunda and Upasunda</a> <a href='#fnref:4' rev='footnote'>↩</a></li><li id='fn:5'><a href="http://pastebin.com/qvBBEB52">Arjun Vanavasa</a> <a href='#fnref:5' rev='footnote'>↩</a></li><li id='fn:6'><a href="http://pastebin.com/REfrvaWy">Keechak Vadha</a> If you don&#8217;t read any of the other footnotes, read this one. It throws light on the true nature of Yudhisthir and Bhima. <a href='#fnref:6' rev='footnote'>↩</a></li><li id='fn:7'><a href="http://pastebin.com/fxTzA7Dc">Krishna promises revenge</a> Read this too, because Krishna is awesome. <a href='#fnref:7' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes and Reading Material on the Mahabharata]]></title>
    <link href="http://vedang.me/weblog/Mahabharata/2012/09/21/notes-and-reading-material-on-the-mahabharata/"/>
    <updated>2012-09-21T20:19:00+05:30</updated>
    <id>http://vedang.me/weblog/Mahabharata/2012/09/21/notes-and-reading-material-on-the-mahabharata</id>
    <content type="html"><![CDATA[<p><em>Cross-posted from my note: <a href="http://www.quora.com/Vedang-Manerikar/The-Mahabharata/Notes-and-Reading-material-on-the-Mahabharata">Notes and Reading Material on the Mahabharata</a> on <a href="http://quora.com">Quora</a></em></p>

<p>People have shown some interest in reading material for the Mahabharata, this post should save me from repeatedly typing the same things</p>

<h3>Introductory books</h3>

<p>These books are straight-forward narrations of the Mahabharata. They introduce the reader to all the major characters and plot turns. In my experience, people are not even aware of the major players in the Mahabharata. To them, it&#8217;s simply the story of 5 good Pandavas vs 100 evil Kauravas. If you have never read the Mahabharata, or are unsure about what you have read, one of these books is a good place to start.</p>

<ul>
<li><p><strong>The Mahabharata - Amar Chitra Katha. [English, Comic]</strong><br/>
This book, accompanied by my grandfather&#8217;s stories, is my
introduction to the Mahabharata. If you read this book, be sure to
also read one of the two other books listed here. This book is a
bit too simplistic, it&#8217;s here because of nostalgic value.</p></li>
<li><p><strong>The Mahabharata - Ramesh Menon [English]</strong></p></li>
<li><p><strong>The Mahabharata - Kamala Subramaniam [English]</strong><br/>
(I recommend reading this book)</p></li>
</ul>


<!--more-->


<h3>Point of View (POV) Narrations</h3>

<p>Now we come to the interesting part of the Mahabharata. If you choose to abandon a Sanjaya-esque all-knowing view of the Mahabharata, and read it from the point of view of a single character as it interacts with the Mahabharata world, you will discover that every character was right in every action they took. This is the real beauty of the Mahabharata. The whole is greater than the sum of it&#8217;s parts. The characters behave as human beings would behave. They make decisions based on incomplete/incorrect knowledge. They are driven by lust, ambition, revenge and other human emotions. Unfortunately, I&#8217;ve come across precious few English books that take this approach. The bulk of the great writing related to the Mahabharata is in regional languages. (In my case, Marathi, my mother-tongue)</p>

<ul>
<li><p><strong>Bhimsen - Prem Panicker [English]</strong><br/>
(from the POV of Bhima)<br/>
This book is a loose English translation of M. T. Vasudevan Nair&#8217;s
Malayalam master-piece Randaamoozham (meaning Second Turn). It is
freely available on the Internet.
(I recommend reading this book)</p></li>
<li><p><strong>Mrityunjaya - Shivaji Sawant [Marathi]</strong><br/>
(from the POV of Karna)<br/>
&#8216;Conqueror of Death&#8217;</p></li>
<li><p><strong>Dhananjaya - Rajendra Kher [Marathi]</strong><br/>
(from the POV of Arjuna)<br/>
&#8216;Conqueror of wealth&#8217;, one of Arjuna&#8217;s names</p></li>
<li><p><strong>Duryodhana - Kaka Vidhate [Marathi]</strong><br/>
(from the POV of Duryodhana)<br/>
(I recommend reading this book)</p></li>
<li><p><strong>Yugandhar - Shivaji Sawant [Marathi]</strong><br/>
(from the POV of Krishna)<br/>
&#8216;Leader of an Era&#8217;<br/>
(I recommend reading this book)</p></li>
<li><p><strong>Radheya - Ranjit Desai [Marathi]</strong><br/>
(from the POV of Karna)<br/>
&#8216;Son of Radha&#8217;</p></li>
</ul>


<h3>Short stories and analyses. (Intermediate level)</h3>

<p>We should now turn to books that explain the Mahabharata (or parts of it) in detail.</p>

<ul>
<li><p><strong>Yugant - Irawati Karve [Marathi]</strong><br/>
&#8216;The End of an Era&#8217;<br/>
(I recommend reading this book)</p></li>
<li><p><strong>Jaya - Devadutt Pattanaik [English]</strong><br/>
&#8216;Victory&#8217;</p></li>
<li><p><strong>Karna khara kon hota? - Daji Panashikar [Marathi]</strong><br/>
&#8216;Who was Karna?&#8217;</p></li>
<li><p><strong>Kapatneeti - Daji Panashikar [Marathi]</strong><br/>
&#8216;Politics of treachery&#8217;</p></li>
</ul>


<h3>Short stories and analyses. (Expert Level)</h3>

<p>I&#8217;ve separated these books from those in the previous section because I think they are better books. This is my personal opinion</p>

<ul>
<li><p><strong>Mahabharat: Ek Sudacha Pravas - Daji Panashikar [Marathi]</strong><br/>
&#8216;A Journey of Revenge&#8217;<br/>
(I recommend reading this book)</p></li>
<li><p><strong>The Lore of Mahabharata - Amaleśa Bhaṭṭācārya [English]</strong><br/>
(Translated from the original in Bengali)<br/>
(I recommend reading this book)</p></li>
</ul>


<h3>Don&#8217;t touch these books with a 10-foot pole (Personal Opinion)</h3>

<p>These books are utter bunkum. Do yourself a favor and don&#8217;t read them.</p>

<ul>
<li><p><strong>The Mahabharat - C Rajgopalachari [English]</strong><br/>
This book is the number one reason why people think of the
Mahabharat as 5 good Pandavas vs 100 evil Kauravas. Throw it away
if you have a copy.</p></li>
<li><p><strong>Palace of Illusions - Chitra Banerjee Divakaruni [English]</strong><br/>
(pretends to be from the POV of Draupadi)</p>

<p>I hate this book. Here is a balanced review of this book, one which
I agree with: <a href="http://jaiarjun.blogspot.in/2008/04/palace-of-illusions-good-bad-and.html">Palace of Illusions: The Good, Bad and Ugly</a>
Jai Arjun Singh has been kind to it. We consider books
sacred in my house, so I didn&#8217;t burn it, but I gave it away as fast
as I could when I finished reading it.</p></li>
</ul>


<h3>The Reference Book</h3>

<p>Kisari Mohan Ganguly [1883-1896] translated the original Sanskrit texts into English word-for-word. He has done a great service to idiots like me, providing a ready reference that I can look up anytime I want. You can find the translated text here:
<a href="http://www.sacred-texts.com/hin/maha/mahatxt.zip">The Mahabharata</a></p>

<p>You can also find the entire original text of the Mahabharata in Sanskrit here:
<a href="http://www.sacred-texts.com/hin/mbs/index.htm">The Mahabharata - Sanskrit</a></p>

<h3>Books I want to read</h3>

<p>These books are gems in Mahabharata literature (from what I&#8217;ve heard), and they are all inaccessible to me either because they are out of print or because they are in an unknown language. If someone has read one of these books and is willing to explain the salient points to me, I will pay for dinner and drinks.</p>

<ul>
<li><p><strong>Yajnaseni - Pratibha Ray [Oriya]</strong><br/>
(from the POV of Draupadi)<br/>
&#8216;Daughter of Fire&#8217;</p></li>
<li><p><strong>Ini ñān ur̲aṅṅaṭṭe - P Kesavan Balakrishnan [Malayalam]</strong><br/>
(from the POV of Draupadi AND Karna - interleaving sections)<br/>
&#8216;And now let me sleep&#8217;</p></li>
<li><p><strong>Randaamoozham - M.T. Vasudevan Nair [Malayalam]</strong><br/>
(from the POV of Bhima)  <br/>
&#8216;The Second Turn&#8217;</p></li>
<li><p><strong>The Stone Women and other stories - Shashi Deshpande [English]</strong></p></li>
<li><p><strong>Krishnavatara - Dr K M Munshi [Hindi]</strong><br/>
(on the life of Krishna)</p></li>
</ul>


<h3>Crowd-sourced Books</h3>

<ul>
<li><strong>Parva - S L Bhyrappa [Kannada]</strong><br/>
(Suggested by Akshay Patki)<br/>
A retelling of the Mahabharata that eliminates all divine elements.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Composability and Compojure]]></title>
    <link href="http://vedang.me/techlog/2012/02/23/composability-and-compojure/"/>
    <updated>2012-02-23T23:57:00+05:30</updated>
    <id>http://vedang.me/techlog/2012/02/23/composability-and-compojure</id>
    <content type="html"><![CDATA[<p>Caveat: This post needs some rudimentary knowledge of Compojure. Compojure is a web framework for Clojure, and if you don&#8217;t understand what that means, then you should probably head over to the <a href="https://github.com/weavejester/compojure/wiki">Compojure docs</a>. Compojure exposes us to a beautifully <em>composable</em> abstraction, and this post is an attempt to show why that is a great thing.</p>

<p>In order to understand the Compojure framework, let us write a small <code>cello world</code> app. The code snippets in this post are a means to explain a concept, they may not work as-is. The full, working code is available at <a href="https://gist.github.com/1893532/">this</a> gist. Okay then, let&#8217;s get started.</p>

<!--more-->


<p>Here is what the basic routes function would look like:</p>

<figure class='code'><figcaption><span>basic_routes.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="nf">cc/defroutes</span> <span class="nv">main-routes</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cc/GET</span> <span class="s">&quot;/&quot;</span> <span class="p">[]</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">req</span><span class="p">]</span>
</span><span class='line'>                   <span class="p">(</span><span class="nf">rur/response</span> <span class="s">&quot;&lt;h1&gt;Cello World&lt;/h1&gt;&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cc/GET</span> <span class="s">&quot;/bye/&quot;</span> <span class="p">[]</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">req</span><span class="p">]</span>
</span><span class='line'>                      <span class="p">(</span><span class="nf">rur/response</span> <span class="s">&quot;&lt;h1&gt;Goodbye World&lt;/h1&gt;&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">route/not-found</span> <span class="s">&quot;&lt;h1&gt;Page not found&lt;/h1&gt;&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compojure uses Ring to handle requests and responses. These terms (request/response) don&#8217;t mean &#8216;objects&#8217; (to those of you from the OOP world) of any kind, they are just hash-maps used to <em>represent</em> the idea. They are data, and as such, can be manipulated in any way we want. Ring has a simple philosophy: write functions which accept a request and return a response. Such functions are called <em>handlers</em>.</p>

<p>The <code>cc/GET</code> helper macro - and it&#8217;s ilk - asks the user for a request-method (specified by the GET in the name cc/GET), a route (string representing uri), and a handler(H1). The macro becomes a handler (H2) which returns the result of <code>(H1 req)</code> if the route and the method of the incoming request match the specified route and request-method, otherwise it returns nil. Wow, that was a mouthful, wasn&#8217;t it?. Stop snickering and saying &#8220;That&#8217;s what she said&#8221;. So anyway, this is our first introduction to composability in Compojure. We have a macro that takes a handler and gives us another handler. As long as we are dealing in handlers, composability allows us to ignore any implementation complexity.</p>

<p>The <code>cc/defroutes</code> macro takes a name and a list of handlers and returns a handler (H3) which runs all the handlers in the list on the request until one of them returns a non-nil value, else it returns nil. Finally, it binds the name to the handler so that we can call it. Simple, isn&#8217;t it?</p>

<p>So if you think you&#8217;ve understood it so far, tell me if adding this route to our main routes will work or not:</p>

<figure class='code'><figcaption><span>composability-one-oh-one.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="nf">cc/GET</span> <span class="s">&quot;/hello*&quot;</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">cc/defroutes</span> <span class="nv">hello-routes</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">cc/GET</span> <span class="s">&quot;/hello/name/&quot;</span> <span class="p">[]</span>
</span><span class='line'>                                 <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">req</span><span class="p">]</span>
</span><span class='line'>                                   <span class="p">(</span><span class="nf">rur/response</span> <span class="s">&quot;&lt;h1&gt;Cello Vedang&lt;/h1&gt;&quot;</span><span class="p">)))</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">cc/GET</span> <span class="s">&quot;/hello/city/&quot;</span> <span class="p">[]</span>
</span><span class='line'>                                 <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">req</span><span class="p">]</span>
</span><span class='line'>                                   <span class="p">(</span><span class="nf">rur/response</span> <span class="s">&quot;&lt;h1&gt;Cello from Pune!&lt;/h1&gt;&quot;</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, yes! <code>cc/defroutes</code> gives us a handler<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>, and that&#8217;s really all cc/GET cares about!</p>

<p>Having an abstraction of this form allows us to do many things easily, knowing that stuff <em>just works</em>. For example, let us write some <em>middleware</em>. What is middleware? Middleware modifies the incoming request or outgoing response in some way that makes us happy. How does this fit into our abstraction? - As a function that takes a handler(H1) and, wait for it, returns another handler(H2). Boom! Confused? Here is what a middleware function looks like:</p>

<figure class='code'><figcaption><span>middleware.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">verify-secret</span>
</span><span class='line'>  <span class="s">&quot;Verify that secret-key has been sent as a parameter s in the request&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">handler</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">request</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;s=please&quot;</span> <span class="p">(</span><span class="ss">:query-string</span> <span class="nv">request</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">handler</span> <span class="nv">request</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:status</span> <span class="mi">403</span>
</span><span class='line'>       <span class="ss">:body</span> <span class="s">&quot;You don&#39;t know the secret word&quot;</span><span class="p">})))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function gets a handler(H1). It doesn&#8217;t know or care what that handler is going to do to the request. It returns a new handler(H2) which does the following: it checks to see if the incoming request knows that the secret word s is &#8220;please&#8221;. If it does, great. Execute H1 on the request and call it a day. Otherwise, return a nil - meaning the request in not valid. Now H2 could go through as many other middleware functions as we want, all of them agnostic of any other middleware functions. Each middleware will return a modified handler(H3, H4, &#8230; Hn), and we will run the final handler on the request.</p>

<p>Here is what the final code would look like<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>:</p>

<figure class='code'><figcaption><span>compojure-middleware.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="c1">;; Define some Hello routes</span>
</span><span class='line'><span class="p">(</span><span class="nf">cc/defroutes</span> <span class="nv">hello-routes</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cc/GET</span> <span class="s">&quot;/hello/name/&quot;</span> <span class="p">[]</span>
</span><span class='line'>          <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">req</span><span class="p">]</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">rur/response</span> <span class="s">&quot;&lt;h1&gt;Cello Vedang&lt;/h1&gt;&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cc/GET</span> <span class="s">&quot;/hello/city/&quot;</span> <span class="p">[]</span>
</span><span class='line'>          <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">req</span><span class="p">]</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">rur/response</span> <span class="s">&quot;&lt;h1&gt;Cello from Pune!&lt;/h1&gt;&quot;</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Our main routes function.</span>
</span><span class='line'><span class="p">(</span><span class="nf">cc/defroutes</span> <span class="nv">main-routes*</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cc/GET</span> <span class="s">&quot;/&quot;</span> <span class="p">[]</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">req</span><span class="p">]</span>
</span><span class='line'>                   <span class="p">(</span><span class="nf">rur/response</span> <span class="s">&quot;&lt;h1&gt;Cello World&lt;/h1&gt;&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cc/GET</span> <span class="s">&quot;/bye/&quot;</span> <span class="p">[]</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">req</span><span class="p">]</span>
</span><span class='line'>                      <span class="p">(</span><span class="nf">rur/response</span> <span class="s">&quot;&lt;h1&gt;Goodbye World&lt;/h1&gt;&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cc/GET</span> <span class="s">&quot;/hello*&quot;</span> <span class="p">[]</span> <span class="nv">hello-routes</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">route/not-found</span> <span class="s">&quot;&lt;h1&gt;Page not found&lt;/h1&gt;&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; A middleware function</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">verify-secret</span>
</span><span class='line'>  <span class="s">&quot;Verify that secret-key has been sent as a parameter s in the request&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">handler</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">request</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;s=please&quot;</span> <span class="p">(</span><span class="ss">:query-string</span> <span class="nv">request</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">handler</span> <span class="nv">request</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:status</span> <span class="mi">403</span>
</span><span class='line'>       <span class="ss">:body</span> <span class="s">&quot;You don&#39;t know the secret word&quot;</span><span class="p">})))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; Wrap my main routes in middleware</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">main-routes</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="o">#</span><span class="ss">&#39;main-routes*</span>
</span><span class='line'>                     <span class="nv">verify-secret</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; Start app with main routes</span>
</span><span class='line'><span class="p">(</span><span class="nf">run-jetty</span> <span class="o">#</span><span class="ss">&#39;main-routes</span> <span class="p">{</span><span class="ss">:port</span> <span class="nv">port</span> <span class="ss">:join?</span> <span class="nv">false</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>main-routes*</code> is a handler which matches the incoming uris to ones we support, <code>verify-secret</code> will make sure that the incoming requests know the secret word. We can go a really long way with functions that take a request and return a response. Compojure gives us a great DSL to deal with the web. It&#8217;s composability facilitates building elegant systems and frameworks.</p>

<h4>Footnotes:</h4>

<div class="footnotes">
    <ol>
        <li id='fn:1'>Actually, we got lucky in this case. `cc/defroutes` is a macro. When we say `(cc/defroutes name & handlers)` the code is replaced to become `(def name handlerfn)`. Luckily for us though, def returns the variable which was just defined, and it works out okay in the end. The aim was to show composability in action, not to espouse a coding style. Never do this in actual code. <a href='#fnref:1' rev='footnote'>↩</a></li><li id='fn:2'>Apparently, we can&#8217;t get line spacing in the octopress codeblock <a href='#fnref:2' rev='footnote'>↩</a></li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switch Statements in Python]]></title>
    <link href="http://vedang.me/techlog/2011/08/07/switch-statements-in-python/"/>
    <updated>2011-08-07T13:21:00+05:30</updated>
    <id>http://vedang.me/techlog/2011/08/07/switch-statements-in-python</id>
    <content type="html"><![CDATA[<p>Today I went through some old Python code and noticed this pattern through out:</p>

<figure class='code'><figcaption><span>messy-ifs.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">response</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">somefunc</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="n">response</span> <span class="o">==</span> <span class="s">&quot;this&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">do_this_with</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">elif</span> <span class="n">response</span> <span class="o">==</span> <span class="s">&quot;that&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">do_that_with</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">elif</span> <span class="n">response</span> <span class="o">==</span> <span class="s">&quot;huh&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">duh</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="c"># lots more elifs.</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">prevent_horrible_crash</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code should ideally have been a switch-case, but Python does not support a <code>switch</code> statement. Proponents of OOP believe that <code>switch</code> is <em>bad</em> - second only to <code>goto</code>. This is not strictly true - both goto and switch can be used elegantly and with great effect. Goto, for example, is great for undoing stacked changes and switch&#8217;s fall-through behavior allows nicely for &#8216;do things according to the stage I&#8217;m at&#8217;. However, if you&#8217;re doing OOP, consider using polymorphism instead.</p>

<!--more-->


<p>I&#8217;m not doing OOP, so polymorphism does not apply to me, but I was looking for a way to optimize this code. I was on a code-cleanup spree, in the &#8220;flow&#8221;, and I thought, &#8220;Why don&#8217;t I use maps to do this?&#8221;. Brilliant! It was a really neat idea. Later I found out that this is the accepted way of doing switch-case in Python and I&#8217;d done nothing special. So anyway, the code now looked like this:</p>

<figure class='code'><figcaption><span>maps-as-switch.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">response_map</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;this&quot;</span><span class="p">:</span> <span class="n">do_this_with</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;that&quot;</span><span class="p">:</span> <span class="n">do_that_with</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;huh&quot;</span><span class="p">:</span> <span class="n">duh</span><span class="p">}</span>
</span><span class='line'><span class="n">response_map</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">prevent_horrible_crash</span><span class="p">)(</span><span class="n">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that would have been that, had I not suddenly developed a conscience. I had replaced perfectly working, mostly readable code with some other code. What if my map solution was slower? What if it was <em>much slower</em>? I&#8217;d done a sizable amount of refactoring, and I did not relish throwing it away. I needed to test my solution, so I wrote some sample code:</p>

<div><script src='https://gist.github.com/1130352.js?file=switch-speed.py'></script>
<noscript><pre><code>from timeit import Timer
from random import randint


def switch_if():
    value = randint(1, 10)
    if value == 1:
        return '1'
    elif value == 2:
        return '2'
    elif value == 3:
        return '3'
    elif value == 4:
        return '4'
    elif value == 5:
        return '5'
    elif value == 6:
        return '6'
    elif value == 7:
        return '7'
    elif value == 8:
        return '8'
    elif value == 9:
        return '9'
    else:
        return '10'


def switch_map():
    value = randint(1, 10)
    smap = {1: '1',
            2: '2',
            3: '3',
            4: '4',
            5: '5',
            6: '6',
            7: '7',
            8: '8',
            9: '9',
            10: '10'}
    return smap[value]


t = Timer(setup='from __main__ import switch_if', stmt='switch_if()')
print &quot;if - &quot;, t.timeit()

t = Timer(setup='from __main__ import switch_map', stmt='switch_map()')
print &quot;map - &quot;, t.timeit()
</code></pre></noscript></div>


<p>The results were disheartening. My replacement code was slower - though only just.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python switch-speed.py
</span><span class='line'>if - 2.08906793594
</span><span class='line'>map - 2.88215684891</span></code></pre></td></tr></table></div></figure>


<p>I tweaked the code a little and moved the creation of the map outside of the <code>switch_map</code> function. Python can access local variables faster than it can access global variables, but I figured a global dict would still beat the cost of creating the dict every time.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python switch-speed.py
</span><span class='line'>if -  2.08955693245
</span><span class='line'>map -  2.00381493568</span></code></pre></td></tr></table></div></figure>


<p>I breathed a sigh of relief. There was a lesson to be learnt here - test/profile <em>before</em> you optimize!</p>

<h4>References and articles:</h4>

<ul>
<li>More information about switch statements smell - <a href="http://c2.com/cgi/wiki?SwitchStatementsSmell">c2.com</a></li>
<li>Goto is not evil - <a href="http://kerneltrap.org/node/553/2131">kerneltrap.org</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Quit StumpWM ]]></title>
    <link href="http://vedang.me/techlog/2011/08/04/why-i-quit-stumpwm/"/>
    <updated>2011-08-04T13:41:00+05:30</updated>
    <id>http://vedang.me/techlog/2011/08/04/why-i-quit-stumpwm</id>
    <content type="html"><![CDATA[<p>After using <a href="http://www.nongnu.org/stumpwm/">StumpWM</a> for nearly a year, I&#8217;m finally quitting and moving back to Gnome. I came to love StumpWM&#8217;s minimalistic approach, and this isn&#8217;t an easy decision. So why am I doing it?</p>

<ol>
<li><p><strong>Pinky Hell</strong></p>

<p>I am (was) a heavy user of Emacs, Tmux and StumpWM. These programs rely heavily on the <code>Ctrl</code> key. This means that the <code>Ctrl</code> key and my left pinky finger are pretty much destroyed at this point. With the spectre of RSI looming over my head, StumpWM is the easiest tool to get rid off. I might have less screen-space now, but my fingers will thank me for it.
<!--more--></p></li>
<li><p><strong>What you gain in Functionality, you lose in Integration</strong></p>

<p>StumpWM is infinitely configurable. If you have the patience, you can get it to do things that are simply impossible with other Windows Managers. For example, there is a <code>mpd.lisp</code> module inside the contrib directory which converts StumpWM into a MPD client. A <em>full-fledged client</em>. This means that all music operations are entirely unobtrusive and <em>always</em> at your beck and call. MPD with StumpWM has without a doubt been the best music setup I&#8217;ve ever used.</p>

<p>However, I missed Gnome&#8217;s integration with Ubuntu - Ubuntu One, Gwibber, Pidgin, event notifications. Even if I <em>could</em> configure StumpWM for these things, there was too much effort involved.</p></li>
<li><p><strong>Dead processes, High temperatures</strong></p>

<p><em>Disclaimer</em> : Everything I&#8217;m about to say now is conjecture. There is no proof that StumpWM is responsible for any of this.</p>

<p>At 5 days uptime, my system load was touching 2, and my system temperature was at 65 degrees C. <a href="http://about.me/kiran_kulkarni/">KK</a> had a similar number of programs running on his system - this is a guy who uses full-blown <a href="http://www.compiz.org/">compiz</a> effects - his system temperature was 36 degrees and load average was around 1.15. Furthermore, he had a 48 day uptime. KK gleefully told me that it had to be StumpWM that was the problem! He was kidding, but some inquiry around the office showed that my laptop was much worse than the other guys on Ubuntu.</p>

<p>I also found that Chrome was leaving behind loads of defunct processes on my machine. There were 41 defunct chromium-browser processes when I decided to reboot the laptop and do some monitoring. Within an hour of the reboot, I had 7 defunct processes, CPU temperature was at 45 degrees and the load average was hovering around 1.8. That was the proverbial straw that broke the camel&#8217;s back. I switched back to Gnome. Later in the day, I thought about actually investigating the behavior of my laptop, but it&#8217;s been behaving well on Gnome. As I write, I have a day&#8217;s uptime, a load average of 1.03 and CPU temperature at 37.5 degrees C. Unscientific, but fine by me.</p></li>
</ol>


<h2>How I got over the Withdrawal Symptoms:</h2>

<p>Of all the StumpWM features, there was just one that I simply could not do without - &#8216;run-or-raise&#8217;. On StumpWM, you can define hot-keys to behave as follows:</p>

<ol>
<li>Launch the program if it is not running</li>
<li>Move focus to the program if it is already running.</li>
</ol>


<p>I use one Emacs instance, one terminal instance (tmux&#8217;ed) and one Chrome instance. I <em>need</em> to be able to access them with minimal friction. Turns out, a little hackery on compiz is all we need - <code>compiz-send.py</code> is a nifty little script that sends messages to DBus and interacts with compiz. I can use it along with <code>xdtool</code> to implement my run-or-raise behavior. Here is a look at my <code>run-or-raise-emacs.sh</code> script:</p>

<div><script src='https://gist.github.com/1130303.js?file=run-or-raise-emacs.sh'></script>
<noscript><pre><code>#!/bin/bash
# get id of emacs
win=$(xdotool search --onlyvisible --class emacs | head -1)

if [ &quot;x$win&quot; = x ]; then
    # Emacs is not running
    # switch to viewport 1, which is my coding viewport
    ~/incoming-src/dotfiles/scripts/compiz-send.py vpswitch switch_to_1_key
    gxmessage -center -timeout 2 -nofocus -buttons &quot;&quot; -borderless &quot;loading emacs...&quot;&amp;
    # start Emacs
    exec /usr/local/bin/emacs &amp;
else
    # Emacs is already running...
    if [ $win = $(xdotool getwindowfocus) ]; then
        # ...and focused
        # do nothing
        sleep 0.2;
    else
        # switch to it
        xdotool windowactivate $win
    fi
fi</code></pre></noscript></div>


<p>You can download <code>compiz-send</code> from <a href="http://wiki.compiz.org/Plugins/Dbus?action=AttachFile&amp;do=get&amp;target=compiz-send.py">here</a>.</p>

<p>So there you have it. At the moment, life is back to Gnome+Compiz. If you know any nifty hacks for Gnome+Compiz, please let me know in the comments.</p>

<h4>References:</h4>

<p><a href="http://wiki.compiz.org/Plugins/Dbus">wiki.compiz.org</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reboot.]]></title>
    <link href="http://vedang.me/weblog/2011/07/30/reboot/"/>
    <updated>2011-07-30T14:24:00+05:30</updated>
    <id>http://vedang.me/weblog/2011/07/30/reboot</id>
    <content type="html"><![CDATA[<p>Once upon a time I had a blog. Then one day I ran out of motivation, inclination, desire, drive, whatnot to post to that blog. I never really ran out of content though. At least, I think not.</p>

<p><img src="http://vedang.me/images/garfield.gif" title="[This image does not belong to me. It is (probably) copyright Jim Davis or some slimeball corporation. I am not using this image for profit, so please do not sue me. (&#34;Ask him to write a post, he goes &#34;No, Thank you&#34;, but ask him to ramble endlessly in an Alt Text...&#34;)]" alt="[This image does not belong to me. It is (probably) copyright Jim Davis or some slimeball corporation. I am not using this image for profit, so please do not sue me. (&#34;Ask him to write a post, he goes &#34;No, Thank you&#34;, but ask him to ramble endlessly in an Alt Text...&#34;)]"></p>

<p>I worried that I&#8217;d drown this world in my drivel, but lately I&#8217;ve come to realise that no one gives a shit. So I&#8217;m going to write for the right reasons: Because it makes me happy. Stick around, and I&#8217;ll try not to bore you. Or leave. I don&#8217;t give a shit.</p>
]]></content>
  </entry>
  
</feed>
