# -*- mode: org; -*-
#+hugo_base_dir: ../../
#+setupfile: ../setup.org
#+filetags: @emacs:emacs

* Installing Emacs from source
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: tinylog
  :END:
** Ubuntu 12.04

$ git clone git://git.savannah.gnu.org/emacs.git

$ sudo apt-get install libxaw7-dev libjpeg-dev libgif-dev libxpm-dev
libpng12-dev libtiff4-dev libncurses5-dev libtinfo-dev libglib2.0-dev
intl-fonts libgtk2.0-dev libxaw3dxft6 librsvg2-dev imagemagick libdbus-1-dev
libgconf2-dev libm17n-dev libotf-dev graphicsmagick-libmagick-dev-compat

# This second step can probably be avoided/replaced with
# $ sudo build-dep emacs
# Need to try that out one of these days

$ make distclean
$ ./autogen.sh
$ ./configure --prefix=/opt/emacs/ --with-xft --with-x-toolkit
$ make bootstrap
$ sudo make install

** Mac OS X 10.7

$ brew install emacs --HEAD --cocoa --use-git-head

$ brew linkapps

# After installing from brew, head to /Library/Caches/Homebrew/emacs--git/
# (source is downloaded here) and make tags for the source

$ make tags

** Compiling and Running Emacs 28 from the native-comp feature branch (Ubuntu 20.04).
   :PROPERTIES:
   :EXPORT_FILE_NAME: emacs-28-native-comp-ubuntu-20-04
   :END:
*** The gist of it, building Emacs from Source
   #+begin_src shell-script
     ./autogen.sh
     ./configure --with-nativecomp
     # If everything works
     make
     # Test the binary
     src/emacs -Q
     # Install the binary
     sudo make install
   #+end_src
*** Problems during Installation
**** Configure fails because libgccjit fails the smoketest
 - Ensure that libgccjit is installed and at the latest version (at
   this point in time, the latest version is 10)
 - Ensure that gcc is at the same version as libgccjit (also 10)
 - Install the Ubuntu toolchain PPA for the latest versions of gcc and libgccjit.
   + https://launchpad.net/~ubuntu-toolchain-r/+archive/ubuntu/ppa
 - After updating / installing the latest gcc, libgccjit-* packages,
   you will need to use update-alternatives to ensure that the correct
   tools are being picked.
   #+begin_src shell-script :eval no
     sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
     sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10
     sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9
     sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
     sudo update-alternatives --config gcc
     sudo update-alternatives --config g++
   #+end_src
 - Ensure that gcc-10 is selected, so that you don't see the 'failed
   smoke test' error message from libgccjit.
**** Configure fails because various libraries don't exist on your system.
 - Emacs needs a number of different libraries during compilation. You
   should look for an install the =-dev= version of any such libraries
   that are missing. (Eg: =libxpm-dev=, =libgif-dev=, =libtiff-dev=)
*** Problems Post Installation
**** You need to generate native compiled files for all your emacs-lisp code
 - Add this to your init.el
   #+begin_src emacs-lisp
     (if (and (fboundp 'native-comp-available-p)
              (native-comp-available-p))
         (setq comp-deferred-compilation t)
       (message "Native complation is *not* available"))
   #+end_src
 - The message in the above code will also tell you whether the Native
   Compilation binary is correctly built.
 - As a one-time run, you can also execute the following code after  =M-x ielm=
     #+begin_src emacs-lisp
       (native-compile-async "/home/<yourname>/.emacs.d" t)
     #+end_src
 - This will create all the necessary =.eln= files for you.
**** You need to clean install your packages, preferably the latest versions of the packages
 - Best to just reinstall all the packages you depend on, to ensure
   that they get compiled properly.
**** Start and profit, huge speed boosts.
 - Very little configuration code broke for me (only one =isearch=
   modification broke, which used =substitute-key-definition= and
   substituted a function which took optional arguments with another
   function which took 0 arguments. This seems to not work within
   native compilation.
* Clj -> Elisp Cheat Sheet
** map = mapcar
mapc is similar to mapcar, expect that it does not accumulate the results.
mapc should be used for side-effects, where we don't care about the
return value.
** apply = apply
The way to call this is:
(apply #'equal '(:a :A))
** keep = delq nil
** = = equal
** first = car
** rest = cdr
** Other Notes:
The function `funcall` can be used to treat the first argument as a
function on the rest of the arguments.

Eg: (funcall #'equal :a :A) => nil
    (funcall #'equal :a :a) => t

* Regex replacements
  Taken right from the Emacs Manual (I always seem to forget this).
  http://www.gnu.org/software/emacs/manual/html_node/emacs/Regexp-Replace.html

  M-x replace-regexp <RET> c[ad]+r <RET> \&-safe <RET>
  replaces (for example) ‘cadr’ with ‘cadr-safe’ and ‘cddr’ with ‘cddr-safe’.

  M-x replace-regexp <RET> \(c[ad]+r\)-safe <RET> \1 <RET>
  ‘\d’ in newstring, where d is a digit, stands for whatever matched the dth
  parenthesized grouping in regexp.
  Note : The parens making groups need to be escaped.
