#+hugo_base_dir: ../
#+setupfile: ./setup.org
* Blog
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: blog
  :END:
This is a dummy container for the listings page for all blog posts. Actual posts should be categorized and created under the appropriate heading. The sections that my site supports are as follows:

1. Blog: My blogposts and writing
2. Tinylog: Fast, useful snippets. Might not always have all the context, but will be useful to the person searching for them.
3. Notes: Notes I take when I watch a video or read a book / article.
4. Projects: Some small projects that I'm working on for fun.
   1. Presentations: List of presentations I've given
   2. Lily's Recipes: I'm thinking of moving this under projects
5. About: A page about me.

** DONE The main blog listing page
   CLOSED: [2020-03-26 Thu 21:27]
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :featured_image "/images/clevinger.jpg"
   :EXPORT_TITLE: Writing
   :EXPORT_HUGO_ALIASES: /weblog/ /techlog/
   :END:
#+begin_description
(Observations, Tech stuff, Learning, Stories)
#+end_description
* Projects
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: projects
  :END:
** DONE The main Project Listing page
   CLOSED: [2020-03-26 Thu 21:26]
   :PROPERTIES:
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :featured_image "/images/peace.jpg"
   :EXPORT_FILE_NAME: _index
   :EXPORT_TITLE: Projects
   :END:
#+begin_description
(Tiny things I build for joy)
#+end_description
** DONE I have questions about COVID-19                 :covid19:coronavirus:
   CLOSED: [2020-03-23 Mon 10:10]
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: i-have-questions-about-covid19
   :EXPORT_FILE_NAME: index
   :EXPORT_OPTIONS: num:1
   :EXPORT_HUGO_RESOURCES: :src "hs_corona.js"
   :END:
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-03-23 Mon 10:10]
   - State "TODO"       from              [2020-03-23 Mon 09:57]
   :END:
This page is a demo page, built to showcase how we can use bots to
answer common questions that people have about COVID-19. This is a
great way for folks to get up-to-date information about the pandemic
while staying at home.

To get started, click on the chat widget on the bottom right corner of
the screen. Follow the instructions.

This bot is built on guidelines and bots published by the World Health
Organization and the Indian Govt. The official websites are:

World Health Organization:
https://www.who.int/emergencies/diseases/novel-coronavirus-2019/events-as-they-happen

The Indian Govt: https://www.mygov.in/covid-19

If you have any questions, comments or feedback on the bot, please
email me at vedang at helpshift dot com.
#+begin_export html
<script src="hs_corona.js"></script>
#+end_export
** DONE Lily's Recipes
   CLOSED: [2020-04-05 Sun 19:03]
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: lilys-recipes
   :EXPORT_HUGO_ALIASES: /recipes/
   :EXPORT_FILE_NAME: index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :featured_image "projects/lilys-recipes/roastalmonds.jpg"
   :EXPORT_OPTIONS: num:1
   :END:
#+begin_description
A Grandmother Gives Her Grandson A Lifetime's Worth Of Recipes.
#+end_description

Lily is a lifelong cooking enthusiast. She collected, cooked,
commented on, and critiqued thousands of recipes over the years - and
she did it before the age of the telephone (let alone the TV, the
computer or the internet).

#+caption: My Ajji - Lila Manerikar :)
file:ajji.jpg

The photo you see here is my 96 year old ajji (grandmother) Lila
Manerikar - lovingly referred to as Lily by her numerous
grandchildren.

I moved out of my parents' home a year and a half ago, and learnt two
things quickly:

1. I was an ungrateful son who never truly appreciated the work that
   goes into setting a dinner table everyday.
2. I liked cooking. I liked the ritual of it, I loved the flavours,
   and it helped me relax.

My grandmother - and my parents - were pleasantly surprised to hear
about my newfound love of cooking. And then Lily said, "Are you
interested in checking out my collection of recipes?". My grandmother
watched every cooking show she could ("Vegetarian only, mind you.")
but I did not know that she collected recipes. I was more than happy
to go through her recipes.

These last years have been harsh on Lily. She lost her eyesight, and
has trouble moving around the house. She cannot cook anymore, but she
is delighted that I enjoy it, and suggests improvements to my recipes
when I describe my successes and missteps to her.

Sadly, we've lost all but one box of Lily's recipes over the years.
Some to poor storage and some to bookworms. As she handed over this
final box of recipes to me, she said:

#+begin_quote
"I used to collect these recipes obsessively when I was young. You
kids have it easy: look at your phone and it will tell you how to cook
something, how it should look, what it should smell like. In my time,
gathering this knowledge was harder. These scraps may or may not be
useful to you, what with your fancy phone. If you find something
useful, great. Otherwise, throw them away."
#+end_quote

That last bit about "throwing them away" comes from a sense of drama
cultivated by watching a healthy dose of daily soaps and cooking shows
for decades. None-the-less, these clippings are precious to me. They
are a glimpse into the life of a person I've never known - a young
woman who raised four kids on a teacher's salary. Someone who was a
long way off from being my grandmother. There are scribbles on the
sides, marking improvements and experiments over time. There are
postcards of recipes exchanged between my grandmom and her daughter -
studying cooking in a Banglorean college. There is the awe of looking
at something that is older than I am, and represents a bygone era.

I want Lily's legacy to live on in a small way, and to be accessible
to all her grandchildren and great-grandchildren. And so I'm moving
these recipes online, out of reach of bookworms and moisture (I'll be
on the lookout for bitworms). I plan to cook the dishes, expand on the
annotations in the corners and raise a toast to my grandmother's
health as often as I can!
* About Me
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: about
  :END:
** DONE The main About Me page
   CLOSED: [2017-08-19 Sat 13:30]
   :PROPERTIES:
   :EXPORT_FILE_NAME: index
   :EXPORT_TITLE: " "
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :featured_image "/images/clevinger.jpg"
   :END:
#+begin_description
(About Me)
#+end_description
file:vedang-2018.jpg

Hi! I'm Vedang. I live in Pune, India and work at [[https://helpshift.com][Helpshift]]. Now a
days, I'm an Engineering Manager working on improving processes and
workflows within the Helpshift Core backend team with the help of my
team mates. Previously, I was an individual contributor and helped
design and write some of the code that runs Helpshift.

I'm passionate about programming, and some of my work can be found on
[[https://github.com/vedang][GitHub]]. I use Emacs as my editor-for-everything, and blog about it
from time to time.

I love talking about technology. If you're talking about distributed
systems, programming languages, performance, data structures, Emacs,
Git, do call me over!

I love reading books, and I write book reviews once in a while. I also
have strong personal [[https://vedang.me/categories/mythology/][opinions on mythology]] and culture, and I use this
space to try and convert random strangers to my point of view.

If you want to get in touch, please send me a message at
vedang.manerikar on Google's email service.

*** Presentations & Talks

- (2015) [[https://www.youtube.com/watch?v=k10_trKtKNk][Dead simple Scalability patterns]]

*** Interviews

- (2017) [[https://medium.com/@helpshift/image-ine-working-in-engineering-at-helpshift-8818247e2188][Imagine working in Engineering at Helpshift]]
- (2014) [[https://yourstory.com/2014/08/vedang-manerikar-helpshift/][Scaling systems at Helpshift]]

*** Open-source Contributions

Some useful things on my Github account:

- [[https://github.com/vedang/csaoid][cheatsheets]] : Some common commands / ways to do things. The Git one is especially useful.
- [[https://github.com/helpshift/emacs-up][emacs-up]] : A bare-bones config for Clojure programming in Emacs.
- [[https://github.com/vedang/clj_fdb][clj-fdb]] : An early version Clojure wrapper on top of the Java API for FoundationDB.
- [[https://github.com/vedang/el-spice][el-spice]] : A minor mode to improve the coding experience of writing Emacs Lisp.
- [[https://github.com/vedang/org-mode-crate][org-mode-crate]] : Super powered configuration for org-mode. Everything I use in my org flow.
- [[https://github.com/vedang/nginx-nonewlines][nginx-nonewlines]] : A Nginx module to strip out all whitespace. (This was my Helpshift Interview task)

* Programming                                      :programming:@programming:
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: blog
  :END:
** DONE The Programmer's Guide to Wisdom                             :wisdom:
   CLOSED: [2020-08-22 Sat 17:15]
   :PROPERTIES:
   :EXPORT_HUGO_SECTION: tinylog
   :EXPORT_HUGO_BUNDLE: programmer-guide
   :EXPORT_FILE_NAME: index
   :TWITTER:  https://twitter.com/vedang/status/1292744222873853952
   :END:
   :LOGBOOK:
   - State "DONE"       from "WORKING"    [2020-08-22 Sat 17:15]
   - State "WORKING"    from              [2020-08-10 Mon 12:20]
   :END:
This poster captures timeless advice on programming, I keep a copy on
my desk to read whenever I can.

file:programmer_guide.png
{{< tweet 1292744222873853952 >}}

I collect such deeply useful and universal advice [[/tags/wisdom/][under the tag
wisdom]], if you want to read more posts of this kind.

** WORKING Using Constraint Propagation to solve the team Oncall rotation :constraint_propagation:clojure:
   :PROPERTIES:
   :EXPORT_FILE_NAME: using-constraint-propagation-for-oncall-rotation
   :END:
   :LOGBOOK:
   - Note taken on [2020-03-25 Wed 23:09] \\
     - Original date: <2020-01-02 Thu>
   :END:
*** Notation
  - Weeks of the calendar are represented by numbers
    + 1 to 52 for every week
  - One run of the program produces one schedule, starting from the next week (after the last provided week in the input schedule)
  - Each person is represented by a map of properties:
    + "name": name of the person,
    + "id": a keyword representing the person,
    + "in-next-rotation?": will be true for people who are to be considered in the next rotation,
    + "prev-rotation-week": will be a number representing the week when the person was oncall. This can be empty for someone who was not present in the previous rotation but would be present in the next one.
    + "leaves": leaves planned by the person. Represented as an array of tuples, each tuple representing the week that the person is on leave, and whether this is a soft/hard constraint on the scheduling. If the person is on leave for longer than one day in the week, it becomes a hard constraint against scheduling. If the person is on leave for only one day in the week, it is a soft constraint.
  - The output schedule is map of person-id -> oncall week number
*** Hard constraints
  - A person cannot be oncall when they are on leave for more than one day in the given week.
*** Soft constraints
  - The next oncall rotation for any person should be as far away from their previous rotation as possible.
  - A person should not be oncall if they have even a single leave planned in the week.

** DONE Simulating the Passport Seva Kendra using Clojure :concurrency:clojure:
   CLOSED: [2018-12-15 Sat 19:56]
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: simulating-the-passport-seva-kendra
   :EXPORT_FILE_NAME: index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true :featured_image "blog/simulating-the-passport-seva-kendra/psk-renderkid.jpg"
   :EXPORT_SUBTITLE: "Exploring concurrency primitives in Clojure"
   :EXPORT_HUGO_ALIASES: /techlog/2018-12-15-simulating-the-passport-seva-kendra/
   :END:
/Cross-posted from my post on the [[https://medium.com/helpshift-engineering/simulating-the-passport-seva-kendra-using-clojure-fd88c12dde8c][Helpshift Engineering Blog]]/

A year ago, I went to the Passport Seva Kendra (PSK) in Mundhwa, Pune
to get my passport renewed. At the time, the government had revamped
this process and made it a simple, step-in/step-out painless affair.
Unfortunately for me, I hit an edge-case in the system and took much
longer than expected to complete. I was there for close to 4 hours. I
used this time to observe the behavior of the PSK and think about
ways to improve the applicant experience. I thought it was an
interesting problem to solve and write about.

Recently, my wife booked an appointment at the PSK to renew _her_
passport and this provided the spark I needed to write about it. So
here we are, a year later, talking about the passport renewal process
at the PSK.

#+hugo: more

*** The Problem Statement
    Let me describe the process to you first.

    - The PSK has appointment slots every 15 minutes, and there are ~25
      people in each slot.
    - Once you enter the PSK, there are 4 to 6 counters to verify your
      documents.
    - On verification, you are assigned a unique token number. We'll
      talk about this in a bit.
    - Token numbers are displayed on an electronic display-board. The
      board indicates which counter the person should go to. You are to
      wait in the waiting area and look at the display. You will soon be
      scheduled against a counter, where a PSK employee will help you
      with that particular stage of the process.
    - There are 3 stages in the process. The first is 'Biometrics'
      (Stage A). At this counter, the PSK employee collects your
      fingerprints and takes your photo. Your online form is updated
      with this information. There are 36 counters serving this stage
      (A-1, A-2 ... A-36).
    - The second stage is 'Form Check' (Stage B). At this point, the
      PSK employee checks the details in your form. If he finds any problems,
      he will redirect you to the Corrections counter. During my visit,
      counters A-34, A-35 and A-36 were reserved for corrections. After
      corrections, you have to come back to this stage. There are 12
      counters (B-1, B-2 ... B-12).
    - The final stage is 'Form Re-Check' (Stage C). At this point, the
      agent double-checks the work of the previous counters and takes
      your form. If there are any corrections you have to go back to the
      corrections counters and start again. Once the form is checked,
      your reissue request has been processed. You are free to leave the
      PSK and go home. There are 10 counters (C-1, C-2 ... C-10).
    - Coming back to the token numbers. These are of the form N-10, S-4
      etc. The alphabet represents the applicant category. These
      categories are as follows:
      + Normal (represented by N) :: Most people fall into this
           category.
      + Senior (represented by S) :: For people older than 60
      + Tatkal (represented by T) :: For people who want speedy
           processing of their passport (and have paid extra for this
           benefit)
      + Requiring Police Clearance (represented by P) :: People who need
           clearance from the police (probably because they have
           criminal records, or work in sensitive departments in the
           government).
    - Categories other than 'Normal' have a higher priority when it
      comes to processing their applications. For the purposes of this
      post, I assume that P has the highest priority, followed by S, T
      and N.

    #+caption: The workings of the Passport Seva Kendra. Illustration by Bhargava Chowdary (@renderkid)
    file:psk-renderkid.jpg

    In the rest of this post, we'll build this system as described
    above, and see if we can fix the flaw in it. We will use Clojure to
    write the solution. Clojure's concurrency primitives are fantastic,
    and helped me model this system in an elegant and readable way. As
    we go along, I'll explain these primitives in brief. [[https://twitter.com/ericnormand][Eric Normand]]
    has written an excellent guide to [[https://purelyfunctional.tv/guide/clojure-concurrency/][understanding concurrency
    primitives]] in Clojure, and [[https://twitter.com/richhickey][Rich Hickey]] has a [[https://www.youtube.com/watch?v=nDAfZK8m5_8][great talk about this]]
    as well. I highly recommend both these resources to the interested
    reader. The focus of this post will be on using these tools to
    implement a non-trivial system.

**** So what is the problem with the system?
     First, let's get the flaw out of the way. The problem with this
     system is that _the applicant has no idea when he'll be scheduled
     with an agent_. He must keep staring at the display board. For
     example, if you are N-30 and stage A took a particularly long time
     for you, others have moved past you to the next stage (B and
     beyond). The display board may read that N-41, N-42 etc are at
     counters B-1, B-2 etc. However, this does not mean that N-30 will
     show up next. The display board may go all the way to N-60 before
     N-30 shows up. As there is no certainty about when your number will
     show up, you have no option but to continuously stare at the board.
     This gets really irritating after a while.

     Here are some ways to deal with this problem:

     1. Instead of using simple queues between the stages, use a
        priority queue. This means that even if N-30 took a long time on
        stage A, and the board had moved on to N-40s and above for stage
        B, as soon as N-30 is done with stage A he will be moved to the
        top of the queue for B. In this way, the applicant can look at
        the board and always tell whether he'll be up next or not.
     2. Generate new token numbers between each stage. This will give
        the applicant a clear idea of the number of people ahead of him
        at any given point in time.
     3. Provide the person with a new display board, where he can enter
        his token and see where he is in the queue for his stage.

     We will see these in action in our simulation program.

*** Representing all the information about the PSK
    Everything describing the behaviour of the PSK can be captured in
    code. For our simulation, the data looks like this:

  #+begin_src clojure
    (def stages
      "The various stages in the PSK, and transition from one stage to the other.

      - `processing-time-range` represents the amount of time spent at the
      counter in this stage (in mins).
      - `next` represents the next stage for the person.
      - `counters` represent the number of counters/agents serving this stage."

      ;; Actual Values:
      ;; 4 Doc verification Counters
      ;; 33 counters for Biometrics
      ;; 12 for form checking
      ;; 10 for final checking
      ;; 3 for corrections
      ;; Using different values here so that the display board is
      ;; human-readable.

      {::enter {:next ::doc-verification}
       ::doc-verification {:next ::biometrics
                           :counters 10
                           :display-str "0-"
                           :processing-time-range [1 5]}
       ::biometrics {:next ::form-check
                     :counters 4
                     :display-str "A-"
                     :processing-time-range [3 15]}
       ::form-check {:next ::final-check
                     :counters 3
                     :display-str "B-"
                     :processing-time-range [2 4]
                     :failure ::corrections}
       ::final-check {:next ::exit
                      :counters 2
                      :display-str "C-"
                      :processing-time-range [2 4]}
       ::corrections {:next ::form-check
                      :counters 1
                      :display-str "D-"
                      :processing-time-range [5 15]}})

    (def waiting-room-capacity 500) ; max number of waiting people

    (def total-capacity
      "number of people that can be in the PSK at max"
      (apply + waiting-room-capacity (keep :counters (vals stages))))

    (def processing-batch-size
      "no of people entering the center at one time."
      25)

    (def new-batch-in-mins
      "time between one batch and the next"
      15)

    (def stage-status
      "For the given stage, the map of possible states that a person can be
      in."
      [;; Person is in the waiting area, looking at the display to see
       ;; when he's called to a counter.
       ::waiting
       ;; Counter is assigned to the person
       ::in-process
       ;; Person is done with the counter and heading to the next stage.
       ::done])
  #+end_src

    We use a simple map - ~stages~ - to represent all the stages in the
    PSK, the number of counters per stage, the amount of time per stage
    and the next stage after this one. A person is either waiting
    (looking at the display board), or is at a counter, or is done with
    a stage (~done~ triggers a move to the next stage). From the point
    of view of the person, he is either waiting or at a counter.

*** Letting people into the PSK, and generating token numbers for them.
    The first thing we will build is the token generator, and we'll use
    the most intuitive Clojure concurrency primitive for this: the
    ~atom~.

**** Clojure Concurrency Primitive - Atoms
     Atoms are useful when reading / writing a single piece of data
     (potentially across multiple threads). This is the common case for
     shared resources and atoms are what I've used in most of the
     concurrency code I've written.

  #+begin_src clojure
    (def token-generator
      "Give the next token number to the applicant."
      (atom {:normal 0
             :senior 0
             :tatkal 0
             :police-clearance 0}))

    ;; Use the token generator to get the next token as follows:
    (comment
      (get (swap! token-generator
                  update
                  person-type
                  inc)
           person-type))
    ;; swap! is a way to atomically change the value held by the atom.
    ;; This does an internal compare and set operation, and thus the function
    ;; passed in to manipulate the value - in this case update - may be
    ;; called multiple times. This function should be free of side effects.
  #+end_src

    Clojure provides something more powerful - the ~ref~ - when you want
    to deal with multiple pieces of data that change together. We'll see
    it in action in the following sections.

    If we choose some weights to represent the probability of an
    applicant belonging to a certain category, we can write some code to
    randomly generate applicants. The relevant code is [[https://gist.github.com/vedang/969a726e1f49f5fc550268a22c4e4b0d#file-psk-clj-L87-L131][here]]. We now have
    a way to assign increasing token numbers to each new person entering
    the PSK.

**** Clojure Concurrency Primitive - Futures
     We'll use another Clojure concurrency primitive - a ~future~ - to
     continuously move people into the PSK. A future object invokes the
     body provided to it in a different thread.

     In this case, we are starting an endless loop in a new thread. This
     code creates some people (representing people entering the PSK),
     sleeps for a bit, then repeats. We'll use our handy tool - an
     atom - to control when to stop the loop:

  #+begin_src clojure
    (def working-hours?
      "Am I working right now?"
      (atom false))

    (defn let-people-through
      "Send people into the PSK in batches as defined by
      `processing-batch-size` and `new-batch-in-mins`. Note that in our
      code we use seconds to represent minutes."
      [active-applicants done-applicants]
      (future
        (loop []
          (if @working-hours?
           (do
             ;; let new people through
             ;; <logic goes here> ...
             ;; then sleep for a while
             (Thread/sleep (* 1000 new-batch-in-mins))
             ;; repeat
             (recur))

           (ctl/info "[Entry] Working hours are over! Closing Shop! Come back later!")))))
  #+end_src

*** Queuing up people and simulating the work done at every stage
    Now that people are coming into the PSK, we need a way to queue them
    up between stages. We also want to write a simulation for the work
    done at every counter. As described in the problem statement, the
    PSK is using simple FIFO queues between each stage. We will use the
    ~LinkedBlockingQueue~ data structure to represent these. This data
    structure is provided by the battle-tested ~java.util.concurrent~
    package. Dropping down to Java when needed is a bonus Clojure
    superpower!

  #+begin_src clojure
    (defn create-kendra-queues
      "Given the counter-types / `stages` in the kendra, create the
      appropriate queues."
      [kendra-stages q-capacity]
      (let [queues-we-need (-> kendra-stages
                               keys
                               set
                               ;; Remove the stages where no queue of
                               ;; people is needed.
                               (disj ::enter ::exit))]
        (reduce (fn [m s]
                  (assoc m
                         s (LinkedBlockingQueue. q-capacity)))
                {}
                queues-we-need)))
  #+end_src

    Work at the counter involves the following:

    1. Pick the next person in the queue.
    2. Call him to the counter by displaying his token number on the
       display.
    3. Process the person, do the work.
    4. Mark this stage as done. This will move him into the next queue.

    We can represent this in code as follows:

  #+begin_src clojure :hl_lines 7-13
    (defn process-applicant
      "Get a person from the queue. Process this person as per the rules
      of the counter."
      [psk-agent my-queue notice-board]
      (if @working-hours?

        (if-let [person (.poll my-queue 1 java.util.concurrent.TimeUnit/SECONDS)]
          (let [stage (:type psk-agent)
                stage-config (:config psk-agent)]

            (call-person-to-counter stage notice-board psk-agent person)
            (process-person stage stage-config psk-agent @person)
            (mark-processing-as-complete stage notice-board psk-agent person)

            (send-off *agent* process-applicant my-queue notice-board)
            (assoc psk-agent :last-processed (person-representation @person)))

          (do (send-off *agent* process-applicant my-queue notice-board)
              psk-agent))

        (ctl/info (format "[Agent: %s] Working hours are over! Closing Shop! Come back later!"
                          (agent-representation psk-agent)))))
  #+end_src

    As we saw previously, we control the running of the code using the
    ~working-hours?~ atom. We're seeing something new here - the
    ~send-off~ function used with Clojure Agents. Ignore this for the
    time being, we'll come to an explanation of this after seeing refs
    and transactions.

*** Keeping track of people and the display board
    The tough part of this project is to keep track of the changes to
    each person's current state and the display board at every instant.
    These two views should always be consistent as multiple people are
    concurrently processed at different stages. Clojure makes this
    delightfully easy with refs and transactions.

**** Clojure Concurrency Primitive - Refs (and transactions)
     Refs can be thought of as permanent pointers to mutable storage
     locations. The stored values can be safely changed - all together
     or none at all - using the functions ~alter~, ~ref-set~ and
     ~commute~ within transactions. Clojure implements a Software
     Transactional Memory system[fn:1] and gives us A,C, and I of the
     famous ACID properties[fn:2]. (Since it's in-mem there is no
     Durability). Using these transactions in code will be familiar to
     anyone with experience of using DB transactions.

     In practice, updating values looks like this:
  #+begin_src clojure
    (defn- call-person-to-counter
      "Announce that person should come to the processing counter. Takes
      `person` and `notice-board` refs, performs a transactional update."
      [stage notice-board psk-agent person]
      (dosync
       (alter person
              assoc
              :stage stage
              :stage-status ::in-process
              :psk-agent (agent-representation psk-agent))
       (store-stage-change person stage ::in-process)
       (alter notice-board
              assoc
              (person-representation @person)
              (agent-representation psk-agent))))
  #+end_src

    Look Ma, no locks! This is much simpler, in my opinion, than
    thinking about which lock to take around which piece of data. Let's
    also check out the ~store-state-change~ function in the code above.
    This is a small data-collection function I wrote to calculate
    statistics about how much time each person takes in each stage.

  #+begin_src clojure
    (defn- store-stage-change
      "For the given `Person` ref, store the change to their stage for later analysis."
      ([person new-stage new-status]
       (store-stage-change person new-stage new-status (ct/now)))
      ([person new-stage new-status time-instant]
       (let [stage-log (->StageHistory new-stage new-status time-instant)]
         (dosync
          (alter person
                 update
                 :stage-history
                 conj
                 stage-log)))))
  #+end_src

    Writing this function is simple: we know we want to modify an
    existing person, so we wrap it in a transaction. The calling code
    happens to already be in a transaction, but Clojure will deal with
    this correctly and collapse all the work into a single transaction.
    From our point of view, we know that anytime this function is
    called, it is going to safely and permanently modify the person and
    store the stage-change in it.

*** Processing people concurrently across all open counters
    The final piece of the puzzle is concurrently processing people on
    all the available counters. This is straightforward to do against a
    thread-pool, but Clojure provides another tool we can use: the
    ~agent~ .

**** Clojure Concurrency Primitive - Agents
     Agents are another way to access/change mutable state, but they do
     this in an asynchronous manner. The functions ~send~ and ~send-off~
     apply actions (functions) to the value held by the agent. The
     return value of the action becomes the new value of the agent.
     However, these actions execute in a different thread
     asynchronously. Clojure also guarantees execution in the order of
     submission. The value of the agent is inspectable at all times.

     In our case, this allows us to represent processing counters as
     agents. The state of the agent is simply an identifier for it.
     Under the hood, each agent is spawning a thread from a thread-pool
     and executing a function. This function pulls the next person from
     the queue supplied to it, processes him, and sends another action
     to the current agent. We saw this function already, but let me post
     it again for clarity:

  #+begin_src clojure :hl_lines 15-16,18-19
    (defn process-applicant
      "Get a person from the queue. Process this person as per the rules
      of the counter."
      [psk-agent my-queue notice-board]
      (if @working-hours?

        (if-let [person (.poll my-queue 1 java.util.concurrent.TimeUnit/SECONDS)]
          (let [stage (:type psk-agent)
                stage-config (:config psk-agent)]

            (call-person-to-counter stage notice-board psk-agent person)
            (process-person stage stage-config psk-agent @person)
            (mark-processing-as-complete stage notice-board psk-agent person)

            (send-off *agent* process-applicant my-queue notice-board)
            (assoc psk-agent :last-processed (person-representation @person)))

          (do (send-off *agent* process-applicant my-queue notice-board)
              psk-agent))

        (ctl/info (format "[Agent: %s] Working hours are over! Closing Shop! Come back later!"
                          (agent-representation psk-agent)))))
  #+end_src

     We create Agents as follows:

  #+begin_src clojure :hl_lines 7-8
    (defrecord PSKAgent
        [id type config])

    (defn- create-agents
      "For the given `agent-type`, create the given `num` of agents."
      [agent-type stage-config num]
      (map (comp agent (fn [i] (PSKAgent. (inc i) agent-type stage-config)))
           (range num)))

    (defn create-kendra-agents
      "Given the `stages` and their config for the kendra, create the
      appropriate agents to work these counters."
      [kendra-stages]
      (let [stages-with-counters (-> kendra-stages
                                     keys
                                     set
                                     ;; Remove the stages where no counter
                                     ;; of agents is needed.
                                     (disj ::enter ::exit))]
        (mapcat (fn [s]
                  (let [config (get kendra-stages s)]
                    (create-agents s config (:counters config))))
                stages-with-counters)))
  #+end_src

*** Tying everything together - the main function
    We tie all the pieces of the code together in our main function
    ~start-the-kendra!~. The comments explain what each step is doing,
    for those of you unfamiliar with Clojure syntax.

  #+begin_src clojure
    (defn start-the-kendra!
      "Setup our Passport Seva Kendra."
      []
      (let [;; Create queues for the various stages, returns a map of
            ;; stage-name -> queue
            stage->queue (create-kendra-queues stages total-capacity)
            ;; Create all the agents
            list-of-agents (create-kendra-agents stages)
            ;; Create a display board for waiting members
            notice-board (ref (sorted-map))
            ;; Track all the active applicants
            active-applicants (ref [])
            ;; Track all the completed applicants (for debugging /
            ;; historical data purpose)
            done-applicants (ref [])]
        (ctl/info "[PSK] Welcome, today is a good day.")
        ;; For each agent at each counter, start processing!
        (doseq [a list-of-agents]
          ;; Get the stage this agent is working at, and the queue of
          ;; people for that stage.
          (let [s (:type @a)
                q (stage->queue s)]
            ;; Start processing people from the queue concurrently in
            ;; independent threads.
            (send-off a process-applicant q notice-board)))
        ;; Start a continuous future for applicants to periodically enter
        ;; the PSK.
        (let-people-through active-applicants done-applicants)
        ;; Start a helper process to move people from one stage to the
        ;; other.
        (move-people-through stages stage->queue active-applicants)
        ;; Return the data. We'll use this to monitor our system.
        [notice-board active-applicants done-applicants]))
  #+end_src

    We haven't seen the ~move-people-through~ helper function used above
    yet. This is a simple ~future~ which regularly sweeps through all
    the people and moves a person done with one stage to the other.

    Originally, I wrote the code such that each agent was aware of an
    input queue as well as an output queue. The agent understood that he
    had to pick the next person from the input queue and move that
    person to the output queue on completion. I refactored that out to
    show that it is simple to add functions around existing concurrent
    code which modify existing shared resources. The code for
    ~move-people-through~ looks like this:

  #+begin_src clojure
    (defn move-people-through
      "Review all the active applicants and move them into appropriate stages."
      [kendra-stages stage->queue active-applicants]
      (future
        (loop []
          (if @working-hours?

            (let [people @active-applicants]
              (doseq [person (->> people
                                  (group-by (comp :stage-status deref))
                                  ::done)]
                (if (= ::exit (get-in kendra-stages [(:stage @person) :next]))
                  (mark-applicant-process-as-complete person)
                  (when-let [next-stage (get-in kendra-stages
                                                [(:stage @person) :next])]
                    (move-applicant-to-next-stage stage->queue next-stage person))))

              (Thread/sleep guide-people-to-next-stage-ms)
              (recur))

            (ctl/info "[Guide] Working hours are over! Closing Shop! Come back later!")))))
  #+end_src

    Both ~mark-applicant-process-as-complete~ and
    ~move-applicant-to-next-stage~ are tiny transactional updates to the
    person:

  #+begin_src clojure
    (defn- mark-applicant-process-as-complete
      "Takes a `person` ref object and marks its processing as complete."
      [person]
      (let [time-instant (ct/now)]
        (dosync
         (alter person
                assoc
                :stage ::exit
                :exit-time time-instant
                :total-time (-> @person
                                :enter-time
                                (ct/interval time-instant)
                                ct/in-seconds))
         (store-stage-change person ::exit ::done time-instant))))

    (defn- move-applicant-to-next-stage
      "Given a `person` ref and the next stage they should go to, move
      them to the stage. Does a transactional update."
      [stage->queue next-stage person]
      (dosync
       (alter person
              assoc
              :stage next-stage
              :stage-status ::waiting)
       (store-stage-change person next-stage ::waiting))
      (.put (stage->queue next-stage) person))
  #+end_src

    I also added a book-keeping function when letting people into the
    PSK. This function removes completed applicants from the list of
    active applicants. This frees up PSK capacity. I also move this data
    to a different list, because it's fun to go through it and look for
    interesting insights.

  #+begin_src clojure :hl_lines 17-18
    (defn- book-keeping-for-applicants
      "Remove all applicants who are completely done from
      `active-applicants`. Store them in `done-applicants` for
      book-keeping.

      ,*NOTE* : Since this goes through the entire collection, it is slow.
      Hence we run it when sending in new batches of people."
      [active-applicants done-applicants]
      (dosync
       (let [[active-people done-people] (reduce (fn [[aa da] p]
                                                   (if (and (= (:stage @p) ::exit)
                                                            (= (:stage-status @p) ::done))
                                                     [aa (conj da p)]
                                                     [(conj aa p) da]))
                                                 [[] []]
                                                 @active-applicants)]
         (ref-set active-applicants active-people)
         (alter done-applicants into done-people))))
  #+end_src

    Here we use the ~ref-set~ and ~alter~ functions to reset the value
    of active-applicants and modify the value of the done-applicants.

*** With me so far? Some thoughts
    - Clojure's concurrency primitives make it simple for me to *think*
      about this problem. I wrote the code like I would write a
      high-level pseudo description of the problem, and it worked just
      fine. I think this simplification is a huge benefit when dealing
      with concurrent code.
    - The ability to write and test small bits of concurrent code is a
      big win. It was simple for me to modify the original code and
      devise experiments around it.
    - We haven't really looked at what this looks like when it's
      running! Let's do that now!

*** Can we see the problem?
    Let's run this system! We're setting up a small loop to display the
    board. We're running much fewer counters than the actual PSK. This
    is in order to make the display board consumable.

    #+caption: A normal day at the Passport Seva Kendra
    file:psk-run-1.gif

    Things look good in this loop, the board looks predictable. The
    problem occurs when someone gets unlucky at one stage, and spends
    much more time there than the average person. Let's repeat the run
    by marking someone as unlucky, and by increasing the number of
    counters processing earlier stages (which matches with reality)

  #+begin_src clojure :hl_lines 1-3,10-14
    (def unlucky-applicant?
      "Introduce a little anarchy!"
      (atom #{"N-3" "S-2"}))

    (defn- process-person
      "Do the work for processing the given person. Takes a `person`
      object and not a ref."
      [stage stage-config psk-agent person]
      (let [processing-time* (get-processing-time-for-stage stage-config)
            processing-time (if (@unlucky-applicant? (person-representation person))
                              ;; You will need more time because the gods
                              ;; are against you.
                              (* 10 processing-time*)
                              processing-time*)]
        (Thread/sleep processing-time)))
  #+end_src

    Here is what this looks like:

    #+caption: N-3 is not having a good day.
    file:psk-run-2.gif

    As you can see, there are a number of people ahead of N-3 by the
    time he's done with stage 0. N-40s are being processed in stage 0 at
    this point in time. He has no idea where he is in the queue of
    people, and must keep staring at the display board at all times.

    I will speak briefly about the three solutions that we initially
    proposed.

**** Solution 1: Use priority queues
     Using priority queues between each stage solves the problem of the
     applicant not knowing when he is next. However, there are two
     points to think about:
     1. The priority queue solves the problem within a given category,
        but not across categories. You know that you are the next N-
        category person at counter B, but you don't know when that will
        be because of all the S/T/P category people that will be served
        first.
     2. A potential drawback of this may be: if a certain set of
        applicants are always slow at each stage, then in this model
        they will bring down the average number of people who will be
        served by the PSK (since we will prioritize serving them over
        people who have moved ahead of them).

     Making the change to use priority queues in our code is trivial. We
     go back to ~java.util.concurrent~ and swap out our
     ~LinkedBlockingQueue~ in favor of a ~PriorityBlockingQueue~. Now
     all we have to do is provide a comparator function. The code for
     this is [[https://gist.github.com/vedang/969a726e1f49f5fc550268a22c4e4b0d#file-psk-clj-L393-L420][here]] We can also generate timing samples across people
     through repeated runs of the program. This will give us an idea of
     whether the average processing time is affected by using a Priority
     Queue or not.

**** Solution 2: New token numbers per stage
     Using new token numbers solves the problem elegantly. This is
     probably not used because of the logistical difficulty of handing
     out new tokens to applicants again and again. In the real world,
     I'm sure that this process may cause confusion if not carefully
     designed. In our system, we already have a perfectly good way of
     getting the next token number - our atomic token generator.
     Implementing this solution is straight-forward and left as an
     exercise for the reader! (This blog post is already quite lengthy!)

**** Solution 3: "Where am I?" Estimated Wait Time
     Another way the PSK can help the applicants is by providing a
     separate self-serve display. The applicant enters his token number
     and gets to see how many people are ahead of him for the given
     stage. Both ~LinkedBlockingQueue~ as well as
     ~PriorityBlockingQueue~ provide a ~toArray~ function which returns
     all the elements of the queue in order.

     As we are tracking the time each person takes at each stage, we can
     also predict the estimated amount of time this person would have to
     wait. This could be an entire blog-post in itself[fn:3].

     I leave this as an exercise for the reader :)

*** Final Thoughts
    The complete code for this exercise can be found [[https://gist.github.com/vedang/969a726e1f49f5fc550268a22c4e4b0d][here]]. The [[https://gist.github.com/vedang/969a726e1f49f5fc550268a22c4e4b0d#file-psk-clj-L530-L545][comment
    block]] at the end of the gist explains how to run the program against
    a Clojure REPL. Note that this is not a trivial simulation of the
    PSK, I believe that the entire code can be actually used by them
    with a small set of changes. A list of things that we have not
    implemented:
    1. In the real world, we'd need to store each person's information
       in a DB along the way. Since the in-mem structures are guaranteed
       to be consistent, this is something we can achieve by
       periodically reading information about all applicants and
       committing it to the DB (similar to how
       ~book-keeping-for-applicants~ works).
    2. We haven't implemented the error and corrections flow. Failure to
       pass a stage can be represented as another state (say ~::error~).
       The ~process-applicant~ code will identify success/failure of the
       stage and set the appropriate state. ~move-people-through~ would
       need minor changes to deal with this. I leave this as an exercise
       for the reader.
    3. In the real world, we'd need to build inputs for a real PSK
       employee to inform us that processing is done. This is nothing
       but a loop inside ~process-applicant~ which checks the DB to see
       if the work is done.

    I'd love to hear feedback about this post. Is there a better way to
    implement this? Tell me. Am I missing use-cases of the PSK and
    implementing a solution to a much simpler problem? Do tell! There
    may be drawbacks to solutions I've proposed that I cannot see, and
    there may be valid reasons the system is built the way it is. I'd
    love to understand the real-world problems that I've missed.

    If you're interested in working with Clojure, on problems like
    Estimated Wait Time, [[https://jobs.lever.co/helpshift/][we're hiring]]! Send us an email at
    [[mailto:jobs@helpshift.com][jobs@helpshift.com]].

    /A big thank you to the following people for reviewing initial
    drafts of this post: Kapil Reddy, Kiran Kulkarni, Mourjo Sen, Suvrat
    Apte, Dinesh Chhatani./

    /A big thank you to [[https://twitter.com/renderkid][Bhargava Chowdary]] for creating the illustration
    of the PSK./

*** References

    - Eric Normand's post explaining all Clojure Concurrency primitives:
      [[https://purelyfunctional.tv/guide/clojure-concurrency/]]
    - Rich Hickey's talk on Clojure Concurrency:
      [[https://www.youtube.com/watch?v=nDAfZK8m5_8]]
    - Atoms: [[https://clojure.org/reference/atoms]]
    - Refs: [[https://clojure.org/reference/refs]]
    - Futures: [[https://clojuredocs.org/clojure.core/future]]
    - Agents: [[https://clojure.org/reference/agents]]

*** Footnotes

[fn:3] Estimating wait-times: [[https://en.wikipedia.org/wiki/Queueing_theory]]

[fn:2] ACID: [[https://en.wikipedia.org/wiki/ACID_(computer_science)]]

[fn:1] STM: [[http://en.wikipedia.org/wiki/Software_transactional_memory]]

#  LocalWords:  PSK Seva Clojure
** TODO Writing Flink Jobs in Clojure               :streaming:flink:clojure:
   :PROPERTIES:
   :EXPORT_SUBTITLE: "Figuring out the hoops you have to jump through to run Clojure code on Apache Flink"
   :EXPORT_FILE_NAME: flink-jobs-in-clojure
   :END:
   :LOGBOOK:
   - Note taken on [2020-03-25 Wed 22:59] \\
     - Original notes taken on <2017-09-02 Sat 19:58>
     - Brushed up on <2019-06-13 Thu>
   :END:
*** 4e3f68a * Add concrete type info to generic Flink interfaces
    Java to the rescue!

    Add a Java class to be a simple data-structure to hold our
    word-count data.

    Define an interface in Java which applies concrete types to generic
    Flink interfaces.

    Reify'ing this *now* has all the type information needed by Flink!
    Clojure code for the win, with a little help from Java.

*** b997c9c * Modify code to use a single reified object
    Since we are reifying the same interface, we might as well do it
    just once, and reuse that object in the various chained stages of
    the Flink pipeline

*** 8f7fcc0 * Convert the WriteIntoKafka example into Clojure
    This one has an important and slightly discouraging discovery. We
    implement our own source here which keeps returning new strings
    every second. We need to implement the `SourceFunction` interface
    for this.

    Initially, I thought that the previous approach of implementing a
    concrete Interface which extends `SourceFunction<String>` would be
    enough, but this is not true. This is because of the way that the
    two methods of the `SourceFunction` Interface interact with each
    other. The `run` method starts a possible infinite loop, and the
    `cancel` method stops the loop started by the `run` method. This
    requires us to mutate state held within the Class, but without
    using any of the Clojure state management methods like atom, ref
    etc. This is because these are not `Serializable`. I don't know how
    to do this from Clojure, and I'm 99% sure that it is not possible.

    Due to this, I had to write a class in Java which implemented the
    `SourceFunction` interface.

*** bab6c3a * Convert the socket-window wordcounter to a defrec
    Using a ~defrecord~ allows me to specify the ~:load-ns~ option,
    which is very useful. It ensures that the entire namespace where
    the defrecord is defined gets loaded when I use the record anywhere
    in my code. This helps avoid errors like:
    + Attempting to call unbound fn:
      #'poclink.event-stream-processor/json-str->event
** DONE Composability and Compojure                  :ring:compojure:clojure:
   CLOSED: [2012-02-23 Thu 23:58]
   :PROPERTIES:
   :EXPORT_FILE_NAME: composability-and-compojure
   :EXPORT_HUGO_ALIASES: /techlog/2012-02-23-composability-and-compojure/
   :END:
/Caveat/: This post needs some rudimentary knowledge of Compojure.
Compojure is a web framework for Clojure, and if you don't understand
what that means, then you should probably head over to the
[[https://github.com/weavejester/compojure/wiki][Compojure docs]].

Compojure exposes us to a beautifully _composable_ abstraction, and
this post is an attempt to show why that is a great thing.
#+hugo: more

In order to understand the Compojure framework, let us write a small
=cello world= app. The code snippets in this post are a means to
explain a concept, they may not work as-is. The full, working code is
available at [[https://gist.github.com/1893532/][this]] gist. Okay then, let's get started.

Here is what the basic routes function would look like:

#+begin_src clojure
  (cc/defroutes main-routes
    (cc/GET "/" [] (fn [req]
                     (rur/response "<h1>Cello World</h1>")))
    (cc/GET "/bye/" [] (fn [req]
                         (rur/response "<h1>Goodbye World</h1>")))
    (route/not-found "<h1>Page not found</h1>"))
#+end_src

Compojure uses Ring to handle requests and responses. These terms
(request/response) don't mean 'objects' (to those of you from the OOP
world) of any kind, they are just hash-maps used to _represent_ the
idea. They are data, and as such, can be manipulated in any way we
want. Ring has a simple philosophy: write functions which accept a
request and return a response. Such functions are called _handlers_.

The =cc/GET= helper macro - and it's ilk - asks the user for a
request-method (specified by the GET in the name =cc/GET=), a route
(string representing uri), and a handler(H1). The macro becomes a
handler (H2) which returns the result of =(H1 req)= if the route and
the method of the incoming request match the specified route and
request-method, otherwise it returns nil. This is our first
introduction to composability in Compojure. We have a macro that takes
a handler and gives us another handler. As long as we are dealing in
handlers, composability allows us to ignore any implementation
complexity.

The =cc/defroutes= macro takes a name and a list of handlers and
returns a handler (H3) which runs all the handlers in the list on the
request until one of them returns a non-nil value, else it returns
nil. Finally, it binds the name to the handler so that we can call it.
Simple, isn't it?

So if you think you've understood it so far, tell me if adding this
route to our main routes will work or not:

#+begin_src clojure
  (cc/GET "/hello*" [] (cc/defroutes hello-routes
                         (cc/GET "/hello/name/" []
                                 (fn [req]
                                   (rur/response "<h1>Cello Vedang</h1>")))
                         (cc/GET "/hello/city/" []
                                 (fn [req]
                                   (rur/response "<h1>Cello from Pune!</h1>")))))
#+end_src

Well, yes! =cc/defroutes= gives us a handler[fn:1], and that's really
all =cc/GET= cares about!

Having an abstraction of this form allows us to do many things easily,
knowing that stuff _just works_. For example, let us write some
_middleware_. What is middleware? Middleware modifies the incoming
request or outgoing response in some way that makes us happy. How does
this fit into our abstraction? - As a function that takes a
handler(H1) and, wait for it, returns another handler(H2). Boom!
Confused? Here is what a middleware function looks like:

#+begin_src clojure
  (defn verify-secret
    "Verify that secret-key has been sent as a parameter s in the request"
    [handler]
    (fn [request]
      (if (= "s=please" (:query-string request))
        (handler request)
        {:status 403
         :body "You don't know the secret word"})))
#+end_src

This function gets a handler(H1). It doesn't know or care what that
handler is going to do to the request. It returns a new handler(H2)
which does the following: it checks to see if the incoming request
knows that the secret word s is "please". If it does, great. Execute
H1 on the request and call it a day. Otherwise, return a nil - meaning
the request in not valid. Now H2 could go through as many other
middleware functions as we want, all of them agnostic of any other
middleware functions. Each middleware will return a modified
handler(H3, H4, ... Hn), and we will run the final handler on the
request.

Here is what the final code would look like:

#+begin_src clojure
  ;; Define some Hello routes
  (cc/defroutes hello-routes
    (cc/GET "/hello/name/" []
            (fn [req]
              (rur/response "<h1>Cello Vedang</h1>")))
    (cc/GET "/hello/city/" []
            (fn [req]
              (rur/response "<h1>Cello from Pune!</h1>"))))

  ;; Our main routes function.
  (cc/defroutes main-routes*
    (cc/GET "/" [] (fn [req]
                     (rur/response "<h1>Cello World</h1>")))
    (cc/GET "/bye/" [] (fn [req]
                         (rur/response "<h1>Goodbye World</h1>")))
    (cc/GET "/hello*" [] hello-routes)
    (route/not-found "<h1>Page not found</h1>"))

  ;; A middleware function
  (defn verify-secret
    "Verify that secret-key has been sent as a parameter s in the request"
    [handler]
    (fn [request]
      (if (= "s=please" (:query-string request))
        (handler request)
        {:status 403
         :body "You don't know the secret word"})))

  ;;; Wrap my main routes in middleware
  (def main-routes (-> #'main-routes*
                       verify-secret))

  ;;; Start app with main routes
  (run-jetty #'main-routes {:port port :join? false})
#+end_src

=main-routes*= is a handler which matches the incoming uris to ones we
support, =verify-secret= will make sure that the incoming requests
know the secret word. We can go a really long way with functions that
take a request and return a response. Compojure gives us a great DSL
to deal with the web. It's composability facilitates building elegant
systems and frameworks.

*** Footnotes:

[fn:1]: Actually, we got lucky in this case. =cc/defroutes= is a
macro. When we say =(cc/defroutes name & handlers)= the code is
replaced to become =(def name handlerfn)=. Luckily for us though, def
returns the variable which was just defined, and it works out okay in
the end. The aim was to show composability in action, not to espouse a
coding style. Never do this in actual code.

** DONE Switch Statements in Python                                  :python:
   CLOSED: [2011-08-07 Sun 13:21]
   :PROPERTIES:
   :EXPORT_FILE_NAME: switch-statements-in-python
   :EXPORT_HUGO_ALIASES: /techlog/2011-08-07-switch-statements-in-python/
   :END:
Today I went through some old Python code and noticed this pattern
through out:

#+begin_src python
  response, data = somefunc()
  if response == "this":
      do_this_with(data)
  elif response == "that":
      do_that_with(data)
  elif response == "huh":
      duh(data)
      ;; lots more elifs.
  else:
      prevent_horrible_crash(data)
#+end_src

This code should ideally have been a switch-case, but Python does not
support a =switch= statement.
#+hugo: more

Proponents of OOP believe that =switch= is *bad* - second only to
=goto=. This is not strictly true - both goto and switch can be used
elegantly and with great effect. Goto, for example, is great for
undoing stacked changes and switch's fall-through behavior allows
nicely for 'do things according to the stage I'm at'. However, if
you're doing OOP, consider using polymorphism instead.

I'm not doing OOP, so polymorphism does not apply to me, but I was
looking for a way to optimize this code. I was on a code-cleanup
spree, in the "flow", and I thought, "Why don't I use maps to do
this?". Brilliant! It was a really neat idea. Later I found out that
this is the accepted way of doing switch-case in Python and I'd done
nothing special. So anyway, the code now looked like this:

#+begin_src python
  response_map = {"this": do_this_with,
                  "that": do_that_with,
                  "huh": duh}
  response_map.get(response, prevent_horrible_crash)(data)
#+end_src

And that would have been that, had I not suddenly developed a
conscience. I had replaced perfectly working, mostly readable code
with some other code. What if my map solution was slower? What if it
was _much slower_? I'd done a sizable amount of refactoring, and I did
not relish throwing it away. I needed to test my solution, so I wrote
some sample code:

#+begin_src python
  from timeit import Timer
  from random import randint


  def switch_if():
      value = randint(1, 10)
      if value == 1:
          return '1'
      elif value == 2:
          return '2'
      elif value == 3:
          return '3'
      elif value == 4:
          return '4'
      elif value == 5:
          return '5'
      elif value == 6:
          return '6'
      elif value == 7:
          return '7'
      elif value == 8:
          return '8'
      elif value == 9:
          return '9'
      else:
          return '10'


  def switch_map():
      value = randint(1, 10)
      smap = {1: '1',
              2: '2',
              3: '3',
              4: '4',
              5: '5',
              6: '6',
              7: '7',
              8: '8',
              9: '9',
              10: '10'}
      return smap[value]


  t = Timer(setup='from __main__ import switch_if', stmt='switch_if()')
  print "if - ", t.timeit()

  t = Timer(setup='from __main__ import switch_map', stmt='switch_map()')
  print "map - ", t.timeit()
#+end_src

The results were disheartening. My replacement code was slower -
though only just.

#+begin_example
$ python switch-speed.py ;=>
;=> if  - 2.08906793594
;=> map - 2.88215684891
#+end_example

I tweaked the code a little and moved the creation of the map outside
of the =switch_map= function. Python can access local variables faster
than it can access global variables, but I figured a global dict would
still beat the cost of creating the dict every time.

#+begin_example
$ python switch-speed.py ;=>
;=> if  -  2.08955693245
;=> map -  2.00381493568
#+end_example

I breathed a sigh of relief. There was a lesson to be learnt here -
test/profile _before_ you optimize!
* Tools                                                        :tools:@tools:
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: blog
  :END:
** WORKING fzf: The shell finder I was desperately missing.
   :CLOCK:
   CLOCK: [2020-08-08 Sat 10:10]--[2020-08-08 Sat 15:57] =>  5:47
   :END:
   :LOGBOOK:
   - State "WORKING"    from              [2020-08-08 Sat 10:10]
   :END:
- https://github.com/junegunn/fzf/
** WORKING Hey.com with Notmuch in Emacs            :hey:notmuch:emacs:email:
   :LOGBOOK:
   - State "WORKING"    from "DONE"       [2020-06-19 Fri 01:24]
   - State "DONE"       from "WORKING"    [2020-06-19 Fri 01:24]
   - State "WORKING"    from "TODO"       [2020-06-17 Wed 21:21]
   :END:
   :CLOCK:
   CLOCK: [2020-06-19 Fri 00:01]--[2020-06-19 Fri 01:24] =>  1:23
   CLOCK: [2020-06-19 Fri 00:00]--[2020-06-19 Fri 00:01] =>  0:01
   CLOCK: [2020-06-18 Thu 22:01]--[2020-06-19 Fri 00:00] =>  1:59
   CLOCK: [2020-06-18 Thu 21:00]--[2020-06-18 Thu 21:30] =>  0:30
   CLOCK: [2020-06-18 Thu 16:48]--[2020-06-18 Thu 18:58] =>  2:10
   CLOCK: [2020-06-18 Thu 10:13]--[2020-06-18 Thu 12:13] =>  2:00
   CLOCK: [2020-06-17 Wed 21:21]--[2020-06-17 Wed 22:05] =>  0:44
   :END:

Hey Folks!

Today, I saw Jason Fried's [[https://www.youtube.com/watch?v=UCeYTysLyGI][demo of Hey.com on Youtube]] -- this is the
cool new email service from Basecamp that everyone is talking about. I
loved the product thinking behind Hey, especially the focus on Email
workflows, which is something that I care about a lot! I'm eagerly
waiting for my Hey invite, but until then, I thought "Let me show you
how much of this can be replicated inside Notmuch with Emacs". What is
notmuch? Notmuch is a *fast* email program that lets you manipulate
your email anyway you want. Let's walk through and see if we can bring
the Hey workflows to it!

1. Email Grouping, Hey Style
2. Screening people / Moving people to Spam
3. Similarly, moving them to Feed or Papertrail
4. Reply Later action for emails
5. Read Together for all unread emails
6. Filtering by person

*** Why I still want to try Hey!

- Renaming a subject / Saving Clips / Adding searchable sticky private notes! ::
  Personal modification / metadata attachment per email is a *killer
  feature*! This is completely incredible and I've wanted this for so
  long!
- Reference Later / Searching for attachments / Viewing attachments! ::
  Another super idea. Specifically, I've often wanted access to
  specific emails / attachments fast on my mobile phone. Google Inbox
  surfaced attachments nicely, making it possible to open the
  attachment directly without opening the email, but that was just
  scratching the surface!
- Removing trackers! :: Thank you :heart:
- Merging different email threads into a single thread on my client! ::
  Again, potentially super useful.

I'm looking forward to a @hey email address!

** WORKING Creating blog-posts from (org) Beamer presentations :orgmode:beamer:
   :LOGBOOK:
   - State "WORKING"    from              [2020-06-17 Wed 21:20]
   :END:
- Handout mode for generating PDF
- Converting the PDF pages to png images with =pdftoppm=
  + pdftoppm -png org_agenda.pdf png_images/org_agenda
- Creating a post with the slide_png as the image and the
  slide_speaker_notes as the content. No other way to do this except
  manually right now. I can write emacs-lisp code for this, using the
  export-file-name to identify images to use and speaker notes to
  copy.
** WORKING Experience Report: Using Basecamp as a Remote team :communication:collaboration:teams:project_management:
   :PROPERTIES:
   :EXPORT_FILE_NAME: exp-report-basecamp
   :END:
   :LOGBOOK:
   - State "WORKING"    from              [2020-06-17 Wed 21:20]
   - Note taken on [2020-03-26 Thu 08:04] \\
     - Started original note on <2020-03-16 Mon>
   :END:
*** Good things
  - Onboarding was beautiful. As a software dev, I learnt a lot about
    how to do this well.
    + Templates to help you set up teams and projects.
    + Videos explaining the basics.
    + The account login choice (between Google login and email/password
      login) was limited, but the switch was seamless.
  - Automatic check-ins are great!
    + The interface and ux is intuitive and makes it easy to follow-up /
      collate / discuss updates across time and / or multiple people.
  - Todos and scheduling is cool!
    + I like the UX, need to spend more time playing with these features
      to understand +/- points.
*** Bad things
  - Campfire
    + No ability to instantly modify your status.
      - I want to let people know what I'm doing. Examples:
        + "Bathroom Break"
        + "AFK for lunch"
        + "On the phone"
      - For a tool helping remote employees, this seems like a big miss.
    + No ability to add reactions in Campfire. Coming from Slack, this
      is a huge step back in the "fun" component.
  - Docs and Files
    + Writing in Basecamp is not substantially better or different from
      writing in Confluence. I had expected that Basecamp would support

** DONE Problems in my brand new System76 Oryx Pro laptop :laptops:system76:popos:linux:
   CLOSED: [2019-05-31 Fri 22:51]
   :PROPERTIES:
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
   :EXPORT_FILE_NAME: problems-in-system76-oryx-pro
   :EXPORT_HUGO_ALIASES: /weblog/2019-05-31-problems-in-system76-oryx-pro/
   :END:
*** *Important Note*
  I'm enjoying using a Linux laptop after years of development on the
  Macbook, and this post is more a list of issues I personally faced
  on moving to Linux after 7 years of development on the Macbook. I'd
  written a similar thing when I'd moved to the Macbook for the first
  time. Hopefully, this will help someone else moving to this
  particular laptop. This is not a "look, linux sux" post. The Oryx
  Pro is a great machine, and is a far better experience than the
  overall Linux experience I remember from 2012.

*** Emacs is unusable due to constant movement of the cursor.
  - The cursor constantly moves to the end of the first line on screen
    for no apparent reason.
    + I'm convinced the reason that the cursor moves to the end of the
      first line on screen has to do with the position of the
      mouse-pointer. I confirmed this by changing `mouse-avoidance-mode'
      to `animate' (from `banish'). This stops the pointer from being
      moved to the top right corner on key press in Emacs. Now, the
      cursor does not move to the end of the first line like it used to,
      but to some other random place (wherever the mouse pointer
      happened to be last)
  - Repeatedly performing certain key-bindings (like C-n) causes a
    buffer menu to pop up. I have no idea why this happens and how to
    reproduce it / stop it.
    + Once the menu shows up, repeatedly pressing the same key-binding
      causes it to go away after some time. (This may be true only of
      C-n, which is what triggers this for me the most.)
  - *Update* : Both problems above are due to the awkward placing of the
    touchpad on the System 76 laptops. This touchpad is sensitive and
    registers "ghost clicks" during typing. I confirmed this by
    disabling my touchpad. The problem went away. This is an acceptable
    workaround for me as I don't need the mouse when I'm in Emacs (and
    disabling/enabling the touchpad is straightforward using =xinput=)
    + =xinput list= will list all the available input devices. Look for
      your touchpad and note the id of the device.
    + =xinput disable <id>= will disable the device.
    + =xinput enable <id>= will enable the device.

*** The space key is weird.
  - More than any other key on the laptop, the space key needs a solid
    thump for it to register. This is especially irritating when typing
    out passphrases, since there is no visible feedback.
  - *Update* : Over time, I've gotten used to this and no longer need to
    worry about whether my keypress has registered or not.

*** Power management and suspend.
**** No "just works" for Suspend.
  - Years of using the Mac have trained me to just shut the laptop lid
    when I'm done working. However, with Oryx, there is no predictable
    way to tell whether the battery will continue to be drained or not
    once the lid is down. I've left a fully charged laptop, come back to
    it 4 hours later to find that it was completely drained (to the
    point that it does not start unless you plug it into a power
    source). I have no clue why this happens.
    + *Update* : Apparently this is famous in the world of System76 as
      the 'suspend black screen of death' bug. :( These are the kind of
      things due to which 'year of the Linux desktop' is a broken
      promise.
  - *Update 2* : Suspend works okayish, it just drains the battery
    faster than I would have expected. I guess I'll have to learn to
    live with this (but it seriously hampers the use of this laptop as a
    carry-around device, which is something I'm grumpy about).
  - *Update 3* : Prolonged use of this laptop really makes me appreciate
    the incredible power management of the Macbook. I love Oryx as a
    development environment, but the Macbook's power management is in a
    whole different class.

**** The Power button is weird.
  - I've gotten into the habit of shutting down my laptop when I'm
    unsure about battery and want to definitely conserve it (example
    when I'm traveling). There is no immediate feedback on pressing the
    power button. Due to this, it's hard to know if the keypress has
    registered or not. This is a small gripe in the big picture, but it
    gets annoying fast.

  #  LocalWords:  touchpad keypress Macbook Oryx Macbook's okayish

** WORKING Setting up email in Emacs using notmuch and mbsync :mbsync:notmuch:emacs:email:
   :PROPERTIES:
   :EXPORT_FILE_NAME: email-in-emacs-notmuch-mbsync
   :END:
   :LOGBOOK:
   - State "WORKING"    from              [2020-06-17 Wed 21:20]
   - Note taken on [2020-03-25 Wed 22:44] \\
     - Jotted down original idea and an initial draft on <2019-05-27 Mon>
   :END:
*** Installing notmuch
    - sudo apt install notmuch
**** Create the notmuch config file
**** Load notmuch.el when running emacs
*** Installing mbsync
    - sudo apt install isync
**** Create the mbsync config file
*** Installing msmtp
    - sudo apt install msmtp
**** Create the msmtp config file
**** Set the sendmail program to msmtp in Emacs
*** Create a script to sync email and index it.
    - nmgetmail.sh
    - install a cron for this.

** DONE Why I Quit StumpWM                          :window_managers:stumpwm:
   CLOSED: [2011-08-04 Thu 13:41]
   :PROPERTIES:
   :EXPORT_FILE_NAME: why-i-quit-stumpwm
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
   :EXPORT_HUGO_ALIASES: /techlog/2011-08-04-why-i-quit-stumpwm/
   :END:
After using [StumpWM](http://www.nongnu.org/stumpwm/) for nearly a
year, I'm finally quitting and moving back to Gnome. I came to love
StumpWM's minimalistic approach, and this isn't an easy decision. So
why am I doing it?
#+hugo: more

***  Pinky Hell
    I am (was) a heavy user of Emacs, Tmux and StumpWM. These programs
    rely heavily on the =Ctrl= key. This means that the =Ctrl= key and
    my left pinky finger are pretty much destroyed at this point. With
    the spectre of RSI looming over my head, StumpWM is the easiest
    tool to get rid off. I might have less screen-space now, but my
    fingers will thank me for it.

***  What you gain in Functionality, you lose in Integration
    StumpWM is infinitely configurable. If you have the patience, you
    can get it to do things that are simply impossible with other
    Windows Managers. For example, there is a =mpd.lisp= module inside
    the contrib directory which converts StumpWM into a MPD client. A
    _full-fledged client_. This means that all music operations are
    entirely unobtrusive and _always_ at your beck and call. MPD with
    StumpWM has without a doubt been the best music setup I've ever
    used.

    However, I missed Gnome's integration with Ubuntu - Ubuntu One,
    Gwibber, Pidgin, event notifications. Even if I _could_ configure
    StumpWM for these things, there was too much effort involved.

***  Dead processes, High temperatures
     _Disclaimer_ : Everything I'm about to say now is conjecture.
     There is no proof that StumpWM is responsible for any of this.

     At 5 days uptime, my system load was touching 2, and my system
     temperature was at 65 degrees C.
     [[http://about.me/kiran_kulkarni/][KK]] had a similar number of
     programs running on his system - this is a guy who uses
     full-blown [[http://www.compiz.org/][compiz]] effects - his system
     temperature was 36 degrees and load average was around 1.15.
     Furthermore, he had a 48 day uptime. KK gleefully told me that it
     had to be StumpWM that was the problem! He was kidding, but some
     inquiry around the office showed that my laptop was much worse
     than the other guys on Ubuntu.

     I also found that Chrome was leaving behind loads of defunct
     processes on my machine. There were 41 defunct chromium-browser
     processes when I decided to reboot the laptop and do some
     monitoring. Within an hour of the reboot, I had 7 defunct
     processes, CPU temperature was at 45 degrees and the load average
     was hovering around 1.8. That was the proverbial straw that broke
     the camel's back. I switched back to Gnome. Later in the day, I
     thought about actually investigating the behavior of my laptop,
     but it's been behaving well on Gnome. As I write, I have a day's
     uptime, a load average of 1.03 and CPU temperature at 37.5
     degrees C. Unscientific, but fine by me.

*** How I got over the Withdrawal Symptoms:

Of all the StumpWM features, there was just one that I simply could
not do without - 'run-or-raise'. On StumpWM, you can define hot-keys
to behave as follows:

1.  Launch the program if it is not running
2.  Move focus to the program if it is already running.

I use one Emacs instance, one terminal instance (tmux'ed) and one
Chrome instance. I _need_ to be able to access them with minimal
friction. Turns out, a little hackery on compiz is all we need -
=compiz-send.py= is a nifty little script that sends messages to DBus
and interacts with compiz. I can use it along with =xdtool= to
implement my run-or-raise behavior. Here is a look at my
=run-or-raise-emacs.sh= script:

{{< gist vedang 1130303 >}}

You can download =compiz-send= from [[http://wiki.compiz.org/Plugins/Dbus?action=AttachFile&do=get&target=compiz-send.py][here]].

So there you have it. At the moment, life is back to Gnome+Compiz. If
you know any nifty hacks for Gnome+Compiz, please let me know in the
comments.

*** References:

[[http://wiki.compiz.org/Plugins/Dbus][wiki.compiz.org]]

* Planning & Organization                        :organization:@organization:
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: blog
  :END:
** DONE Writing a good status update :communication:project_management:engineering_management:
   CLOSED: [2019-08-06 Tue 07:49]
   :PROPERTIES:
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
   :EXPORT_FILE_NAME: writing-a-good-status-update
   :EXPORT_HUGO_ALIASES: /techlog/2019-08-06-writing-a-good-status-update/
   :END:
We share written status updates within the team on a weekly basis (every Monday). I wrote this article to explain what these status updates should look like, and I think it's useful enough to publish publicly. Here goes:

*** What is the purpose of status updates?
  - Let *your manager* know what you have achieved last week.
  - Let *your co-workers* know what you have achieved this week.
  - *Reflect* on your progress and pace *yourself*.

*** Properties of good status updates
  - *Short* and *meaningful*. (5 min reading time)
  - Communicate *work in the previous week*, *highlight progress*.
  - Communicate *plan for the next week*, *help make yourself efficient*.
  - Communicate *open questions* and *blockers*, *highlight areas where we need to help you*.

*** Writing the status update
  Write the status update either as the last thing on Friday or as the
  first thing on Monday. Remember to review the status you had posted
  previously, so that you don't miss out on any updates. If you choose
  to write on Friday end-of-day, this can also be a great wind-down /
  logging-off ritual to wrap up the week and give yourself a sense of
  accomplishment.

*** Create sections for your updates
 - Use the following sections:
   + What I accomplished this last week
   + What didn't go according to plan
   + What I plan to do next week
   + Questions / Blockers / Action Items
 - This makes it *easy to parse* your update.

**** Name the project you are currently working on
  - Yes, your manager is supposed to know what you are working on. But
    you often do unplanned, extra tasks too. You help on other projects,
    handle production issues, discover interesting tidbits, get insights
    from analyzing logs. *Highlight all of these activities!*.
  - Help your manager by making it easy for them to compile project reports.
  - This makes your update very readable.

**** Name the milestone of the project you are currently working on.
  - Helps when the team needs to take a call about cutting or
    increasing scope on a project.
  - Highlights and reinforces upcoming co-ordination points.

**** Your status update should definitively answer the following questions:
  - What are you working on?
  - For each project that you are working on, where are you? What is the
    next date that you are committing to?
  - Are you on track for the current phase of the project or not? If
    not, what is the impact on the overall project?

**** Example status update
***** What I accomplished this last week:
  - Completed final PRD review for *Project X*, no open questions at
    this point! :yay:. Project is *on track*!
  - Pushed a fix to *ABC Service* to production and closed *Jira Ticket
    Z*. Graphs show amazing reduction in network bandwidth! :epicwin:
    /link to graph or screenshot/.
  - Conducted the Enterprise initiative meeting, meeting notes are here:
    /link to meeting notes/.
***** What didn't go according to plan:
  - Working on dev of *Project Y*. Project is *not on track* :sad_face:.
    We had communicated that dev will be complete by <2019-08-02 Fri>
    but I will need 3 more days. This pushes the *new date to
    <2019-08-07 Wed>* EOD.
***** What I plan to do next week:
  - I will have the initial estimates for *Project X* by EOD
    <2019-08-08 Thu>.
  - I will complete the Dev work on *Project Y* as mentioned above.
    *<2019-08-07 Wed> EOD*
  - I will create a document about *DEF Topic* as we had discussed by
    EOD <2019-08-09 Fri>.

***** Questions / Blockers / Action Items:
  - We need to sync up about ideas for implementing *Project X* before
    tomorrow EOD, but you don't have an empty meeting slot until
    day-after. What should we do?
  - I will inform *Frontend team-member* that *Project Y* integration
    testing cannot start tomorrow, instead it will start on
    <2019-08-08 Thu>.

*** What do you get from writing a good update?
  - A *record of work for yourself*. This is invaluable come performance
    review time. You only have to read through 26 updates and you have a
    thorough summary.
  - *Help your manager* advocate for you during appraisals. You should
    care about your career more than anyone else.
  - *Help yourself*. Writing the update should *give you* a clear idea
    of your own progress and what you need to work on.

*** Addendum: How did we get here?                                 :noexport:
  We didn't directly start with written updates in our team. We've
  gotten here after a number of different attempts which, with periodic
  review, we rejected.
**** The Daily Standup

**** The Weekly Standup

** TODO Project planning in Plain Text :taskjuggler:mermaidjs:gantt:emacs:orgmode:

   :PROPERTIES:
   :EXPORT_SUBTITLE: "Organizing your planning in org-mode."
   :EXPORT_FILE_NAME: project-planning-in-plain-text
   :END:
   :LOGBOOK:
   - Note taken on [2020-03-25 Wed 22:38] \\
     - Jotted down the original idea on <2019-04-06 Sat>
   :END:
*** Points
    - Gantt charts are a very effective planning tool
    - Everyone ends up on gantt charts:
      + manually maintain an excel sheet
      + use professional (and expensive) tool for all or part of your
        project planning: MS Project, Project Plan 365.
    - Wouldn't it be great to have this in plain text?
      + mermaidjs
      + ^ Great tool. Easy to write plain text gantt charts and see the
        visualization.
      + Where do we store this information? I want it to be a part of
        the day to day work I'm doing.
    - Enter org-mode
      + Incredible tool for personal planning, note taking, task tracking
      + Missing visualization tools, but has all the tools to hook things together.
      + Let's get to work connecting org-mode and mermaidjs
    - What we get
      + Add source blocks anywhere in your org-file, as you would normally do.
      + All the data is available for you to read within context.
      + Dealing with dates in Org is a breeze.
    - What are the pain points?
      + Tangle the org-file, Process the generated file, Evaluate the processed file
        - Too many manual steps
      + Adding new sections means you have to remember to add the
        section to the tangle block in the correct order.
    - What is missing
      + Being able to add a leave for 2 days in the middle of a planned
        project and have relevant plans automatically adjust. Need to
        check if tools support this.


  #+hugo: more

  Gantt Charts are the best.

* Tinylog                                                          :@tinylog:
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: tinylog
  :END:
This is a container for the listings page for all my wiki posts.
** DONE The main tinylog listing page
   CLOSED: [2020-08-22 Sat 17:56]
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :featured_image "/images/clevinger.jpg"
   :EXPORT_TITLE: Tiny snippets of useful information.
   :END:
   :LOGBOOK:
   - State "DONE"       from              [2020-08-22 Sat 17:56]
   :END:
#+begin_description
(A Wiki of Commands)
#+end_description
I spend way too much time on the net searching for the same things
over and over again. Usually it's the tiny odd-job that I am looking
to get done, or that one special or obscure command that I _just can't
remember_. This collection is for exactly such things.
** DONE Tinylog: Mbsync: Error: Channel <x> Is Locked                :mbsync:
   CLOSED: [2017-10-11 Wed 19:22]
   :PROPERTIES:
   :EXPORT_FILE_NAME: mbsync-channel-is-locked
   :EXPORT_HUGO_ALIASES: /techlog/2017-10-11-mbsync-channel-is-locked/ /blog/mbsync-channel-is-locked/
   :END:
You may come across the following error when running ~mbsync~ :

#+begin_example
  Error: channel :<channel-name>-remote:<folder>-:<channel-name>-local:<folder> is locked
#+end_example

This happens when there is another ~mbsync~ instance running in
parallel and it has taken a lock on the particular folder. In my case,
I am running ~mbsync~ via a cron-job, and it tends to leave dead
instances around if the laptop sleeps during a run. Kill all instances
of ~mbsync~ and restart the process and you should be fine!
* Notes                                                               :@notes:
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: notes
  :END:
This is a container for the listings page for all notes posts.
** DONE The main notes listing page
   CLOSED: [2020-03-26 Thu 21:27]
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :featured_image "/images/clevinger.jpg"
   :EXPORT_TITLE: Notes
   :END:
#+begin_description
(Notes I take from videos, articles, books)
#+end_description
** DONE Lazy Weekend Viewing: Preventing the collapse of civilization :technology:history:programming:
   CLOSED: [2020-04-12 Sun 18:20]
   :PROPERTIES:
   :EXPORT_FILE_NAME: preventing-the-collapse-of-civilization
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :syndication '((twitter . 1249325252594642944))
   :TWITTER: https://twitter.com/vedang/status/1249325252594642944
   :EXPORT_HUGO_ALIASES: /blog/preventing-the-collapse-of-civilization/
   :END:
   :CLOCK:
   CLOCK: [2020-04-12 Sun 17:04]--[2020-04-12 Sun 18:20] =>  1:16
   :END:
"[[https://www.youtube.com/watch?v=pW-SOdj4Kkk][Preventing the Collapse of Civilization]]" is an excellent talk by
Jonathan Blow (of Braid fame) at DevGAMM 2019. It's inspiring and I
recommend you make the time to see it. My notes below:

*** Summary
- It is a myth that technology only advances. We've often seen
  significant backward slides in tech. (Lots of examples to illustrate
  this point)
- Software is in decline. Both software robustness and programmer
  productivity is declining. (Lots of examples to illustrate this
  point)
- We need to fight complexity and strive for simplicity in every step
  if we want to battle degradation and loss of capability.

*** Technology degrades over time
- Unless people make intentional effort to avoid this.
  + We have this idea of technology marching forward, but it goes
    backward all the time.
  + We've forgotten lots of tech over time when empires have fallen.
    (excellent examples in the talk)
  + Entire inter-connected thriving global system collapsed in 1177
    BC. (end of the Bronze Age)
- It takes a lot of energy to communicate from generation to
  generation and there are losses inevitably. This has happened to us
  with Microprocessors already. (Interview with Bob Colwell, Chief
  Microprocessor Architect, Intel illustrating this point)

*** Thesis: Software Robustness is in decline right now
- It's hard to recognize a slow collapse, the fall of the Roman Empire
  took 300 years.
- Software has been free riding on hardware, so it looks like we are
  doing okay.
- Software is having small local technological improvements (like
  machine learning) while suffering from degradation is other areas
  (like creating efficient apps)
- We don't expect software to work anymore, and this has been
  happening for so long that it's become the new normal.
  + "Just restart it!"
  + Jon: "I'm just going to note down / take a screenshot every time
    software I use has an obvious bug or unintuitive / incorrect
    behavior." ~ collected loads of examples in just a few days.
  + Try counting for yourself and you will be surprised by how many
    bugs there are, where the system just doesn't do the thing it's
    supposed to.
- If your laptop itself is less than 3 nines uptime, nothing running
  on it will be 5 nines. 5 nines was a standard that we were selling
  in the 90s, but it's completely infeasible today.
- If you haven't seen an entire industry produce robust software in a
  decade, what makes you think they can do it at all?

*** Thesis: Programmer Productivity is in decline right now
- Programmers: "Working on a higher level of abstraction lets me be
  smart! Save Effort!"
- You start out by being right and then you extrapolate it too far
  into the wrong territory.
- The flip side of higher lever of abstraction is the loss of
  capability altogether.
- Productivity per programmer is dropping, not increasing. This is
  easy to look at in terms of innovation in Products across multiple
  companies vs number of engineers they employ.
  + Interview with Ken Thompson talking about writing Unix in 3 weeks
    to illustrate this point.

*** If Robustness and Productivity are both declining, Software cannot be advancing
- "You cannot just"
  + Copy a program from one computer to another
    - The installer is for getting around incompatibilities added at
      the OS layer. The OS removes capabilities like compatibility.
  + Statically link
  + Draw a pixel on a screen
  + Write a shader
  + Compile a program without a manifest
  + Run an unsigned program
- All of these things add friction, bugs, engineering time, headspace.
  They keep us from thinking about and doing interesting things.

*** Complexity accelerates knowledge loss
- An example of complication: Language Server Protocol
  + A complicated, slow way to do libraries.
  + It's a hassle to write plugins (made up problem). So instead, just
    talk to a language server over a socket.
  + There is nothing special in looking up the location of X. It's
    just an API, and what you are saying is we should architect APIs
    like this. Which is crazy.
  + If you have to author something for this system, you now have to
    author and debug for a distributed system, where state is not
    located in any central place.
  + You are basically converting your fast system into a slow
    distributed debugging hell.
- Is there a point of reasonable complexity, and if so are we past it?
  How would we know?
  + Example of how complexity will impact the gaming industry: First
    there won't be people to make competing Game engines, then there
    won't be people good enough to maintain the existing systems.
  + In the bronze age, reading and writing were not widespread, so they
    were fragile.
    - Today, almost nobody knows what is happening on a CPU/GPU, that
      skill is fragile.
- Complication accelerates Knowledge Loss
  + More to know, so you only end up knowing a small percentage.
  + Deep knowledge replaced by trivia
  + Good information drowned by noise.
    - The harder it is to understand something, the more noise / bad
      answers around it.
*** Resources:
- Videos recommended by Jonathan Blow:
  + Casey Muratori: [[https://www.youtube.com/watch?v=kZRE7HIO3vk][The Thirty Million Line Problem]]
  + Samo Burja: [[https://www.youtube.com/watch?v=OiNmTVThNEY][Civilization: Institutions, Knowledge and the Future]]
  + Eric Cline: [[https://www.youtube.com/watch?v=hyry8mgXiTk][1177 BC: The Year Civilization Collapsed]]
** WORKING Lazy Weekend Reading: What is User Story Mapping? :project_management:
   :PROPERTIES:
   :EXPORT_FILE_NAME: user-story-mapping
   :END:
This post compiles notes from the following resources by Jeff Patton,
the author of [[https://www.amazon.in/User-Story-Mapping-Jeff-Patton/dp/935110897X/][User Story Mapping]]:
1. His Youtube video: [[https://www.youtube.com/watch?v=a--xbF_WGyM][Why Documents Fail]]
2. His blog-post on the topic: [[https://www.jpattonassociates.com/the-new-backlog/][The New User Story Backlog is a Map]]

I'm reading through the book right now and it's great. These resources
convinced me that the book was worth purchasing. Here are my notes:

*** The problem with documents:
  - Specifying in writing does not work well, it's open to
    misinterpretation.
  - Shared documents are not sharing all the information. What is the
    story?
  #+begin_quote
  "Stop sharing documents and tell me the story!" ~ Jeff Patton.
  #+end_quote
*** Stories:
**** What is a Story?
  #+begin_quote
  "If you can tell stories about what the software does and generate
  energy and interest and a vision in your listener's mind, then why not
  tell stories before the software does it?"
  ~ Kent Beck.
  #+end_quote
  - Stories get their name from *how we use them*, not how we write them
    down.
    + Related: Tell stories, don't just write them down.
  - Talk about the outcome, not just the output.
  - Focus discussion and collaboration around who will use and benefit
    from the thing you are building, and what's going to happen "later"
    after the delivery.
  - The release is not the celebration, the "later" is the celebration.
  - Use simple visualizations to anchor the stories you tell.
**** Basics of developing a Story
  - *Card*: User writes what they want on a card.
  - *Conversation*: Developer figures out the details of what they need
    to build, by talking to the User.
  - *Confirmation*: Developers may get it wrong, but since it's a
    conversation, they can always clarify their understanding and
    iterate.
*** How to have Conversations:
  - When we have a shallow discussion, we may all take away something
    different.
  - The way to detect differences in understanding are by externalizing
    our thinking with words and pictures.
  - When we combine and refine, we arrive at something better.
  - Afterwards, when we say the same thing, we actually mean it.
  - What you record in conversations works like a vacation photo.
    Looking at it helps you remember details that are not in the photo.
    + The best documents use words and pictures to help us recall our
      conversations. They don't replace the conversations.
  - If you replace a conversation with a document, you've stopped using
    stories.
    + Start with shared understanding
    + Spread shared understanding with discussion
    + Build software equipped with shared understanding
    + Reading through documents alone cannot make this happen, this is
      where the end result does not match our expectations.
*** Story Maps:
**** What is a Story Map?
  - Stories are not enough by themselves.
    + You can't build things one little thing at a time.
    + Arranging stories in the order you'll build them doesn't explain
      to others what the system does.
  - You need to tell the whole story of the product and understand the
    whole system!
  - A Story Map helps organize the discussion about the user's
    experience with our product.
    + Build story maps in small collaborative groups.
    + Use mapping to break down big stories and to help find small
      viable solutions.
  - Story maps build effective stories, and effective stories connect
    everyone to the purpose of your product.
**** How do you build a Story Map?
  - The top most stories are the "big stories" or "user activities".
  - Smaller stories ("user tasks") are arranged under the big stories in
    a grid form.
  - If the person using the system does one thing after the other, put
    the early thing on the left and the later thing on the right. The
    order in which you'd explain the system to someone else is the
    correct order of activities.
    + The map should help you tell the story.
**** Your Story Map is ready. Now what?
  - Once your map is ready, walk through it with a user / stakeholder /
    developer. Does the whole story work? This exercise will help you
    find things that you've missed.
    + Missed steps.
    + Pain points and "real problems".
    + Correct sizing of stories and their place in the map.
  - Once your map is ready, it will show you the backbone of your
    system. This is the list of big things at the top, these are
    essential to your system.
    + You don't prioritize the backbone, it just "is". The backbone is
      the list of the most basic things that your system needs.
    + Prioritize the stories hanging down from the backbone. Higher ==
      absolutely necessary. The list of stories placed high describe the
      smallest possible system you could build that would give you
      end-to-end functionality. This is the "skeleton" of your system.
  - Keep the story map displayed and easily viewable at all times. It
    should become the constant point of discussion about the product you
    are building.
  - Your product is built and you want to add a new feature. Now what?
    + Build a story map for your new feature

** TODO Lazy Weekend Reading: API design and the Scikit-learn project   :api:
   :LOGBOOK:
   - Note taken on [2020-03-25 Wed 23:17] \\
     - Original idea was on <2020-02-09 Sun>
   :END:
** DONE Lazy Weekend Reading: A love letter to Clojure              :clojure:
   CLOSED: [2019-10-13 Sun 23:02]
   :PROPERTIES:
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
   :EXPORT_FILE_NAME: love-letter-to-clojure
   :EXPORT_HUGO_ALIASES: /weblog/2019-10-13-lazy-weekend-reading-love-letter-to-clojure/ /blog/love-letter-to-clojure/
   :END:
I had no idea that /Gene Kim/, author of three books that have
garnered wide-spread public acclaim, was doing Clojure programming.
(They are DevOps Handbook, Phoenix Project, and Accelerate -- we've
ordered them recently for the Helpshift Library). He published [[https://itrevolution.com/love-letter-to-clojure-part-1/][a
love-letter to Clojure]] this weekend, and I think it is an absolute
must-read for *all programmers* (whether you write Clojure or not).
The blog-post covers the following areas:

*** General software philosophy
  - Choose tools that are good to *think* with
  - Most bugs are due to programmers not understanding all the possible
    states their code may execute in. *Make state and it's mutation
    explicit*. Put it in a specific place and mutate it with a small set
    of specific functions.
  - *Conventions matter*. They help readability of code, which is critical.
  - *Make systems simple to change*. Don't "trap yourself in a system of
    work where you can no longer solve real business problems easily.
    Instead, you’re forced to merely solve puzzles all day, trying to
    figure out how to make your small change, obstructed by your
    complected system".
  - Developer productivity is enhanced when they follow the ideals
    listed below. Invisible structures around us either help or hinder
    in this regard.
    + The first ideal: *Locality and Simplicity*
    + The second ideal: *Focus, Flow and Joy*
    + The third ideal: *Improvement of Daily Work*
    + The fourth ideal: *Psychological Safety*
    + The fifth ideal: *Customer Focus*
  - "Practice as a transcendental experience" and "Practice as hard work
    and perseverance" are both needed for developers to level up.
  - Bugs can be introduced by not understanding programming language
    constructs (eg: in Ruby, strings are mutated if you use the <<
    operator).
*** Specific Programming Practices
  - *Pure functions are trivial to test* -- build input, look at output.
    If it's hard to write a test for your code, that's a sign that it is
    complicated. Try to simplify it by pulling pure functions out of it
    and writing tests for those.
  - *Push side-effects (impure functions) to the edge of the program* /
    piece of code that you are writing. Not practicing this leads to
    code becoming increasingly untestable and difficult to change.
    + example of good vs bad way:
      #+begin_src clojure

        ;; good way: steps are composed together, which each compiler phase
        ;; indepdendently executable and testable.

        (-> (tokenize-source-files!)
            (generate-abstract-syntax-tree)
            (generate-intermediate-representation)
            (generate-assembly-instructions)
            (write-assembly-output-files!))

        ;; bad way: all the intermediate steps buried inside other functions,
        ;; no longer reachable or inspectable.

        tokenize-source-files-and-generate-ir-and-generate-assembly();
      #+end_src
  - Pushing I/O to edges reduces the need for mocks and stubs
*** The Joy of Clojure
  - Ease of writing short, beautiful code that just works.
  - Simpler syntax frees your brain to think about the problem you want
    to solve.
  - The REPL experience enables developer to stay focused and in flow
    state. The developer experiences joy in REPL driven development.
  - Clojure is a high-level language that gets out of your way. "A
    programming language is low-level when its programs require
    attention to the irrelevant." - Alan Perlis
*** Other notes
  - The brightest days of infrastructure, operations and security are
    still ahead of us. They involve providing platforms to developers
    that hide the complexity of these things and allow the developer to
    focus on the business problem they want to solve.
*** Resources:
  - Some great blog-posts:
    + Bryan Cantrell: [[https://twitter.com/bcantrill/status/1042180114199375872][A love letter to Rust]] (which inspired this post)
    + John Carmack: [[http://www.gamasutra.com/view/news/169296/Indepth%5C_Functional%5C_programming%5C_in%5C_C.php][The power of functional programming concepts in C++]]
    + Shu Uesugi and Julien Benchetrit: [[https://medium.freecodecamp.org/react-introduction-for-people-who-know-just-enough-jquery-to-get-by-2019-version-28a4b4316d1a][An Introduction to React in 2019 (For People Who Know Just Enough jQuery To Get By)]]
    + Uncle Bob Martin: [[https://blog.cleancoder.com/uncle-bob/2019/08/22/WhyClojure.html][Why Clojure?]]
  - Some great videos:
    + John Carmack: [[https://youtu.be/1PhArSujR_A][Rewriting Wolfenstein 3D using functional programming techniques]]
    + Rich Hickey: [[https://www.infoq.com/presentations/Simple-Made-Easy/][Simple Made Easy]]
    + Dr. Mihaly Csikszentmihalyi: [[https://www.ted.com/talks/mihaly_csikszentmihalyi_on_flow?language=en][TED talk on the flow state]]
    + Brian Goetz: [[https://youtu.be/2y5Pv4yN0b0][Stewardship of the Java ecosystem]]
    + Rafal Dittwald: [[https://youtu.be/vK1DazRK_a0][Solving problems the Clojure way]]
    + Bruce Hauman: [[https://youtu.be/j-kj2qwJa_E][Talking about figwheel for Clojurescript development]]
    + Sean Corfield: [[https://www.youtube.com/embed/UFY2rd05W2g][Using the REPL to debug a problem in core.memoize]]
    + Tiago Luchini: [[https://youtu.be/EDojA_fahvM][Writing declarative domain models]]
    + David Nolen: [[https://www.youtube.com/watch?v=77b47P8EpfA][Rethinking Identity]]
  - Some great books:
    + Michael Nygard: =Release it!=
    + Chas Emerick, Brian Carper, Christophe Grand: =Clojure Programming=
    + Russ Olsen: =Getting Clojure=
    + Brian Goetz: =Java Concurrency in Practice=
    + Martin Fowler: =Refactoring: Improving the design of existing code=
    + Dr. Mihaly Csikszentmihalyi: =Flow: The psychology of optimal experience=
    + Daniel Higgenbottom: =Clojure for the brave and true=
    + Carin Meier: =Living Clojure=
    + Mark Schwartz: =Seat at the table: IT leadership in the age of agility=
  - Clojure tutorials:
    + Eric Normand: [[https://purelyfunctional.tv][Purely Functional]]
    + Arne Brasseur: [[https://lambdaisland.com][Lambda Island]]
** DONE Lazy Weekend Viewing: GOJEK's 10x Engineer - Truth or Myth? :engineering_management:gojek:culture:
   CLOSED: [2019-07-20 Sat 07:39]
   :PROPERTIES:
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true :featured_image "blog/gojek-10x-engineering/gofigure6.jpg"
   :EXPORT_HUGO_BUNDLE: gojek-10x-engineering
   :EXPORT_FILE_NAME: index
   :EXPORT_HUGO_ALIASES: /weblog/2019-07-20-gojek-10x-engineering/ /blog/gojek-10x-engineering/
   :END:
*** Summary
    - Engineering quality is paramount. Focus on [[https://dave.cheney.net/2019/07/09/clear-is-better-than-clever][clean and clear code]].
      Code is the primary medium of communication for any engineer.
      Write beautiful code and hold people to high standards.
    - Adding head count has vast hidden costs and often brings down
      output. The reason for this is the exponential increase in
      communication required to align everyone to common goals.
    - Similarly, pods cannot scale unless they can own small,
      independent components.
    - Monoliths are normal and good when the company is small.
      Refactoring the monolithic model into different components allows
      us to scale pods and org.
    - Carve monoliths only when it hits critical mass. Then, identify
      the pain and pull it out into it's own pod.
    - "Relationship as a service" or "Please get this done for me over
      and above other stuff on your plate"
      + "Traffic congestion" (A team which is too busy) and structural
        failure can lead to the impression that the system is
        bureaucratic and political.
    - Criteria when hiring Engineers
      + Computer science (Can computers understand your code?)
        - Ability to grasp large complex systems
        - Understanding of implications of design choices on that system.
      + Software Engineering (Can humans understand your code?)
        - How well do you communicate through your code? This is the
          metric that enables building *good* systems.
        - The hygiene you show in code is the hygiene you will enforce
          on others.
      + Good behavioral traits (Can you grow?)
        - Curious
        - Wants to learn
        - Can accept feedback
        - "Strong opinions, Weakly held."
        - "Pride without attachment."
    - Find the full video [[https://www.youtube.com/watch?v=He0XBBfCEVk][here]]!
    - The rest of this post is detailed notes on the video
  #+hugo: more
*** Introductions
    - CEO: Nadiem Makarim
    - CTO: Niranjan Paranjape
    - Tech Recruitment Head: Sidu Ponnappa
    - C42 Engineering: Sequoia SWAT Team for solving tech problems
      + They were the rare "other Clojure shop" in India in 2010.
    - Common consulting milestone for them was "the Client just tried
      to poach me". When Gojek tried this with Niranjan, they sold the
      entire company to Gojek.
    - Today, Gojek does $9 BILLION in transactions with 300 engineers.
*** How do you get so much done with so few engineers
    - Adding headcount does not increase output.
    - With every engineer you add, you actually slow down work
      (exponentially)
    - A good finance person will challenge you on every item of spend
      because they understand that that's how they lose money.
    - Similarly, a good engineering leader will challenge you on every
      addition of headcount. The hidden cost is enormous and impacts
      ability to deliver quickly and at quality.
*** Collaboration, Communication and Team Size
    - Every person you add exponentially increases the combinatorics of
      communication you need in order to agree on what exactly it is
      that you are building.
    - *Code is communication between humans. Keep it clean and simple.*
    - Upto 4 people, productivity grows linearly with addition of
      people. Beyond that it starts plateauing and dipping.
      + The person who observed this started slicing and dicing teams
        so that at any point in time a subsystem was being worked on by
        no more than 4 people.
      + By [[https://goodroot.ca/post/2018/10/13/practicality-metaphysics-conways-law/][Conway's Law]], he was forcing system architecture to be set
        up in a certain way.
    - We chose to map out our systems based on what a 5 person team
      could do.
*** What about "number of pods"? Will infinite teams of 5 scale infinitely?
    - As an organization, we find similar diminishing returns with
      growing the number of pods that we have.
    - The company's ability to add pods is also limited by ability of
      the pods to understand the underlying system.
    - If your pods are independent (have to collaborate only once in 2
      to 4 weeks), then you are in a manageable situation.
    - Multiple pods working on the same problem leads to pushing for
      local goals (evolving the system to maximize your objectives
      based on limited understanding)
*** Complexity of organizations
    - "Don't slow me down" from CEO to engineering
      + Philosopher poet engineers
      + Engineering had to educate the CEO on the bad effects of not
        on-boarding new comers fast enough
    - Adding Kafka to our stack allowed us to scale
      + Helped us decouple communication
      + Tap into our data, you don't need to ask me anymore.
    - *Refactoring the monolithic model into different components
      allowed us to put more people on the independent teams.*
*** Monolith to SOA
    - We first pulled out the allocation system
      + matching driver to customer
    - Next we pulled out Go Pay
      + This allowed us to staff the team of Go Pay without them having
        to understand the entire monolith.
    - *Identify a problem, pull it out, establish a pod around it.*
    - CTO was pushing CEO:
      + Before we move into this new thing, we need to get rid of the
        monolith first.
      + The choice they made was *never stall growth*. This meant
        hanging on to the monolith for longer than they would have
        liked, and refactoring it in bits and pieces rather than in one
        single effort.
    - When starting out, it makes complete sense to have a monolith.
    - When you carve a system out of a monolith, eventually that will
      become a monolith.
      + Now you need to split it again.
      + *Identify when the monolith reaches critical mass, and then
        refactor your team and code-base in lockstep.*
*** Relationship as a service AKA How politics enters your system
    - I need something from your system, so I'm going to lean on our
      relationship to unblock me and ignore your own priorities.
    - "Hey I really need this done fast, because X"
    - This will grow until you are completely busy trying to unblock
      other people and are unable to focus on any of your own
      priorities.
    - Now you have a bureaucracy. The person with the back-channel to
      the blocked system gets to jump the queue. This inherently does
      not scale because people without the relationship back-channel
      get more and more frustrated.
    - "Our organization is political." I don't have privileged access,
      therefore that other guy must be master politician.
    - *The actual underlying problem is traffic congestion. If you are
      trying to do your best, you are going to use every resource at
      your disposal, including your relationships, to get work done*
    - *Even in the most well-intentioned and non-egotistical
      organizations, structural failure leads to the perception of
      favoritism*
*** Is there such a thing as a 10x engineer?
    - *As system complexity grows, for you to meaningfully contribute,
      you need to know the system!*
    - Criteria to select engineers
      + Computer science (can computers understand your code?)
        - Ability to grasp large complex systems
        - Understanding of implications of design choices on that system.
      + Software Engineering (can humans understand your code?)
        - How well do you communicate through your code?
        - Communication problems are the hard blockers on building good
          systems.
        - Well written code provides contextual logic and [[https://dave.cheney.net/2019/07/09/clear-is-better-than-clever][clarity]].
      + Good behavioral traits:
        - curious
        - wants to learn
        - reads books
        - can accept feedback
        - ^ This is the kind of person who can grow.
*** Good practices in coding
    - Every code-base comes with a glossary
    - Terms have specific meaning, and naming is critical in the
      dividends it pays off in the future.
    - Every engineer at every level has to take a written test
    - We are not looking at whether you can solve the complex problem.
      We are judging how you express yourself. You are a programmer,
      and your code should speak well for you.
    - *Hygiene becomes more and more important as a programmer becomes
      more and more senior. The hygiene you show in code is the hygiene
      you will enforce on others.*
    - High standards are important.
*** Differences between good engineers and 10x engineers
    - 10x *outcome* (not output)
    - As you grow your organization, individual outcome is less
      important. Team outcome is what you need to measure.
    - Engineering is completely a team sport.
    - You can have deeply capable and extremely competent individual
      contributors who like to work alone. As long as their code fits
      beautifully with other systems, they are multiplying everyone's
      capacity.
*** How do you spot red flags in a new hire?
    - Every good engineer is highly opinionated. A good engineer has
      strong opinions weakly held.
      + You should be able to change your opinion on being presented
        facts.
    - If you are unable to deal with criticism of your code, that's a
      smell.
      + We ask junior people to interview senior engineers. This shows
        the grace they have when dealing with others.
    - We routinely wind up in situations where you have young people
      owning complex systems. Senior engineers need to be hired to now
      deal with these systems, and they will be on-boarded by juniors.
      They should be able to deal with this fact.
    - CTO: "When I lay out a design, I expect people to give me
      rational criticism so that I can learn from them."
    - If you had to hire someone with deep experience vs great
      behavioral foundations, what would you choose?
      + It Depends!
      + Sometimes, you need to bring deep experience to the table to
        build something out and learn from the guru.
      + Behavioral traits means that someone is teachable. Outside the
        Valley, this is extremely important because of the lack of
        access to experienced engineering.
*** Onboarding / Engineering bootcamp
    - Structured decision making
    - Basic coding hygiene
    - Collaboration
      + How do you engage with someone else to meaningfully decide
        reasonably quickly what something in code should be.
    - Heavy focus on coding during the bootcamp.
    - We bring in coaches from *every team* and teach. (regardless of
      hire). This helps us build empathy, which is critical for future
      collaboration.
    - Pride without attachment.
      + Pride allows you to focus on creating beautiful code.
      + Attachment means you will stand in the way of the evolution of
        your beautiful baby. You need to let it go and let others
        change it.
      + If you look back at code you wrote 6 months back and don't
        notice how bad you were, you aren't growing.
    - Repeat the same problem every Monday throughout the whole
      bootcamp. Ask them to review every week and see if they find that
      feeling of progress.
*** Gojek culture
    - Even the most high-performing team has to deal with intense time
      pressure.
    - What makes or breaks teams under pressure?
      + Show them the impact that they are making.
      + You don't need to push engineers, you need to give them the
        rush! External force will not drive the maker as much as the
        impact of work will.
      + The value you create is not proportional to the time you put
        in, it's proportional to the state of your mind in that time
        you put in.
        - If you are burned out, or your team mate is burned out then
          there is going to be a huge negative spiral.
      + To harness creativity, you need balance and psychological
        safety. The hours that you put in, you need to be in a state of
        flow. This requires you to take short breaks after days of
        intense activity.
    - You can have a 10x engineer amidst you, but you may never know it
      because you did not give them sufficient leeway to unleash their
      art.

* Random                                                     :random:@random:
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: blog
  :END:
** TODO Things to do in New York and New Jersey.   :recommendations:vacation:
   :PROPERTIES:
   :EXPORT_FILE_NAME: nynj-vacation
   :END:
   :LOGBOOK:
   - Note taken on [2020-03-26 Thu 07:36] \\
     - Original note on <2019-05-27 Mon>
   :END:
*** TODO Sleep No More                                              :theater:
    :LOGBOOK:
    - State "TODO"       from              [2019-05-27 Mon 10:59]
    :END:
    - Off Broadway play in the Mckittrick Hotel.
    - Interactive theatre, the audience gets to be a part of the play.
*** TODO Infinity Hornblower                            :sights:skyline:boat:
    :LOGBOOK:
    - State "TODO"       from              [2019-05-27 Mon 11:00]
    :END:
    - Boozy Brunch on a boat
    - Perfect for a party and enjoying the skyline of New York
    - Ideal to pick the twilight ride, in order to enjoy both the day
      time and night time view of the skyline.
*** TODO Walk on the Brooklyn Bridge / Promenade.               :sights:free:
    :LOGBOOK:
    - State "TODO"       from              [2019-05-27 Mon 11:03]
    :END:
    - A free, wonderful walk. Great sights.
*** TODO Top of the Rock                                             :sights:
    :LOGBOOK:
    - State "TODO"       from              [2019-05-27 Mon 11:03]
    :END:
    - Pricey but beautiful view of New York (and especially Central
      Park) from the top of the Rockefeller building.
*** TODO Central Park                                                 :heart:
    :LOGBOOK:
    - State "TODO"       from              [2019-05-27 Mon 11:05]
    :END:
    - My favorite place in all of New York, and the one thing I'm
      genuinely jealous of NY citizen about. I wish Pune had such a
      place.
    - I need to visit this place multiple times
**** TODO Shakespeare in the park.                                  :theater:
     :LOGBOOK:
     - State "TODO"       from              [2019-05-27 Mon 11:08]
     :END:
     - Shakespeare in the Park is a *free* performance of select
       Shakespeare plays performed by the Public Theater every day in
       Summer. This year, they are performing _Much Ado About Nothing_
       from May 21st to June 23rd.
     - The way to get tickets is to stand in line at the Delacorte
       Theater (open air theater inside Central Park) on the morning of
       the performance you want to attend. The tickets tend to run out
       by 10:30 am. The show is at 8 pm.
     - You need to register and create an account at the Public Theater
       here:
       https://publictheater.org/Programs--Events/Shakespeare-in-the-Park/register/.
       This gives you a Patron ID that you need when buying tickets.
*** TODO Free tour by foot                                             :free:
    :LOGBOOK:
    - State "TODO"       from              [2019-05-27 Mon 11:19]
    :END:
    - https://freetoursbyfoot.com/new-york-tours/
    - Excellent pay-what-you-wish tours.
    - There are a lot of categories for tours here. I'm most interested
      in the walking (sight-seeing) tours and food tours.
      + Greenwich Village Food Tour covers a bunch of very famous food
        stops.
*** Food Joints / Restaurants / Bars / Pubs / Speakeasies              :food:
**** TODO Smalls                                                       :jazz:
     :LOGBOOK:
     - State "TODO"       from              [2019-05-27 Mon 11:36]
     :END:
     - Excellent Jazz club in Greenwich Village.
**** TODO Patent Pending                                          :speakeasy:
     :LOGBOOK:
     - State "TODO"       from              [2019-05-27 Mon 11:32]
     :END:
     - Cool Speakeasy!
     - (I prefer Bathtub Gin)
**** TODO Bathtub Gin                                             :speakeasy:
     :LOGBOOK:
     - State "TODO"       from              [2019-05-27 Mon 11:30]
     :END:
     - Speakeasy with Jazz and Burlesque performances
**** TODO Le Bain                                               :rooftop:bar:
     :LOGBOOK:
     - State "TODO"       from              [2019-05-27 Mon 11:02]
     :END:
     - Amazing rooftop bar near the High Line.
     - Great views of New York.
     - Fancy and upscale place, dress in business casuals and shoes.
**** TODO Cafe China                           :michelin:finedine:restaurant:
     :LOGBOOK:
     - State "TODO"       from              [2019-05-27 Mon 11:39]
     :END:
     - a Michelin Star restaurant for Chinese cuisine
**** TODO Roberta's Pizza                                             :pizza:
     :LOGBOOK:
     - State "TODO"       from              [2019-05-27 Mon 11:42]
     :END:
     - Superb Pizza place in Brooklyn
**** TODO The Counter                                                :burger:
     :LOGBOOK:
     - State "TODO"       from              [2020-01-25 Sat 22:21]
     :END:
     - Superb burgers

** WORKING Best Laid Plans And किरन्या                            :true_stories:
   :PROPERTIES:
   :EXPORT_FILE_NAME: best-laid-plans-and-किरन्या
   :END:
   :LOGBOOK:
   - Note taken on [2020-03-25 Wed 23:20] \\
     - Happened on <2017-08-14 Mon>
     - Jotted down <2017-08-19 Sat 13:30>
   :END:
- 14th August.
- wifey is staying at her parents tonight, because there's a pooja she
  needs to perform early next morning.
- looking forward to a long uninterrupted work session, followed by a
  relaxed tuesday.
- "Vedang, you should go to Akku Maushi's place today." Why? It's
  Gokulashtami today!
- Okay, I'll leave early and take the Bullet. I'll beat the ridiculous
  traffic, go meet Akku Maushi and Shree Kaka, offer my prayers and
  leave in half an hour, be back home in two and a half hours total.
- I also haven't driven the Bullet all this rainy season, so two birds
  with one stone! Vedang you're a genius.
- I did leave early and I did beat the traffic! Yes! I was at Akku
  Maushi's home at 6 pm on the dot. I could be back home by 7:30 pm!
- I imagined I would be alone. I was wrong. Many of my uncles and
  aunts were there. As was my mom!
- So instead of leaving at 6:30 pm, I ended up staying till 7:30 pm.
  Not gonna lie, I was super pampered and loved every minute of it. It
  was fun talking to everyone.
- "Vedang, since you're here, come home with me. Drop me home, have
  dinner and then leave."
- "No, mother, I have work to finish today. If I stay for dinner then
  it'll be too late getting back home and I won't get anything done."
- "Okay, then drop me to Swargate so that I can catch a bus home."
  "Yes, will do."
- As we approach the Swargate bus station, we see the 21 number bus
  that would have taken my Aai home leave. We've missed the bus by a
  minute! I wait with my mother and chat about everyone at home until
  the next bus arrives. It's 8:30 pm now.
- Okay, mom's on her way home. Now let's ride home and get to work!
- No! No! No! the bullet's out of petrol!
- Okay no worries,
** DONE Reboot
   CLOSED: [2011-07-30 Sat 14:25]
   :PROPERTIES:
   :EXPORT_HUGO_BUNDLE: reboot
   :EXPORT_FILE_NAME: index
   :EXPORT_HUGO_ALIASES: /weblog/2011-07-30-reboot/
   :END:
Once upon a time I had a blog. Then one day I ran out of motivation,
inclination, desire, drive, whatnot to post to that blog. I never
really ran out of content though. At least, I think not.

#+hugo: more
#+caption: This image does not belong to me. It is (probably) copyright Jim Davis or some slimeball corporation. I am not using this image for profit, so please do not sue me.
file:garfield.gif

I worried that I'd drown this world in my drivel, but lately I've come
to realise that no one gives a shit. So I'm going to write for the
right reasons: Because it makes me happy. Stick around, and I'll try
not to bore you. Or leave. I don't give a shit.

* Interviews                                         :interviews:@interviews:
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: blog
  :END:
** DONE Imagine Working in Engineering at Helpshift       :culture:helpshift:
   CLOSED: [2017-09-07 Thu 07:27]
   :PROPERTIES:
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
   :EXPORT_FILE_NAME: imagine-working-in-engineering-at-helpshift
   :EXPORT_HUGO_ALIASES: /weblog/2017-09-05-imagine-working-in-engineering-at-helpshift/
   :END:
/Cross-posted from my interview published on [[https://medium.com/@helpshift/image-ine-working-in-engineering-at-helpshift-8818247e2188][Helpshift's Medium blog]]/

- Name: Vedang Manerikar
- Current Role: Principal Engineering Manager, Backend
- How long you have been with Helpshift?: 7 years

#+hugo: more

*** What does your day-to-day at Helpshift look like?
    My day-to-day is unblocking people and getting things done!

    I review architecture, read code, enable customer service, help
    product guys understand the engineering pros and cons of their
    product decisions and prioritize work for maximum productivity. I
    work with an amazing team. They make all of this possible and
    achievable.

    That means I also get to hang out with my best friends, catch up
    on their day-to-day, laugh at inside jokes that have been running
    for years and overall have a blast. Seven years at a place lets
    you build deep relationships and puts a smile on your face when
    you think about work!

*** What has been your favorite off-site team oriented event, and why?
    When we were cash-strapped and raising funds, a team off-site was
    the running joke of the company. "After Series A!", we would raise
    our glasses and say. As time went on without funding in sight,
    every request turned into "After Series A!".

    So when we did raise our first round, we treated ourselves to a
    long weekend at a spectacular villa in Goa. It was a heady
    celebration and the world was our oyster. It remains my favorite
    off-site because the funding felt like validation.

*** What role(s) did you start in at Helpshift and how have you graduated/migrated into different roles?
    I came to Helpshift with a strong systems background: writing
    kernel modules and working on storage replication. I started
    writing Python at Helpshift and then graduated to Clojure (in
    2011, when almost no one else was writing Clojure). I've since
    written and helped design large chunks of the Helpshift
    architecture, and have learnt interesting things about distributed
    systems through trial-by-fire. Today, I make an impact by making
    sure my team has clear, unambiguous goals and all the resources to
    achieve these goals.

*** Favorite thing about working for an SF tech startup:
    I have a lot of "favorite things" about working at Helpshift (We
    keep our workplace fun!). A small example of this is that on any
    given day someone or the other will bring home-made snacks and
    goodies for the others to enjoy.

*** What advice would you have for prospective Helpshift candidates?
    We're still a small enough company that everyone knows everyone
    else by name. If you're the kind of person who wants to get in on
    the ground floor and grow with a company, we're perfect for you.
    Come with a no-nonsense, no-bullshit attitude. Be a kind person.

*** What is your proudest moment at Helpshift?
    My colleagues and I have taken this company from serving 0
    requests per second to serving 50,000 requests per second. We're
    installed in over 2 Billion devices in the world. That means that
    there's a 50% chance that you (reader) have us installed in one of
    the apps on your phone. That sentence is a source of great pride
    for me.

*** How would you describe the company culture and what do you like most about it?
    As a company, we've always looked for attitude over smarts. We
    want people who are good listeners and good communicators. We want
    people who are passionate and hold strong opinions. We want people
    who care about quality. This is the culture that we've always
    striven to maintain at Helpshift.

*** Superpower (real or fake): Obscure Emacs shortcuts.
    Give a man Emacs and he'll get some programming done. Teach a man
    how to tweak it and play with it and he'll happily shave yaks for
    the rest of his life.

*** Slightly addicted to: Tea.
    Walking out of the office to have road-side tea in the evening is
    an old Helpshift tradition. I'm always on the lookout for great
    Masala Chai, and if you come to my home I'll whip up a fantastic
    cup of tea for us to chat over!

*** Always on the search for the perfect: new book to read.
    Reading is one of my favorite ways to unwind. I read anything that
    I can get my hands on: fantasies, travelogues, thrillers, pop
    psychology, autobiographies, technical books, comics, you name it!

*** If you could interview one person, dead or alive, who would it be and why?
    Isaac Newton or Albert Einstein or Alan Turing! (Sorry I cheated.)
    These were phenomenal people with world-changing ideas. How did
    they get them? How did they remain productive all their life? What
    did "work" mean for them? What was their work day like? What did
    they do to unwind? What did they do for leisure? Who did _they_
    look up to? I'd love to know these answers!
* Mahabharat                                         :mahabharat:@mahabharat:
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: blog
  :END:
#+begin_description
Opinionated Posts On A Literary Masterpiece.
#+end_description
** DONE Krishna in the Mahabharat                          :pandavas:krishna:
   CLOSED: [2012-09-20 Thu 20:18]
   :PROPERTIES:
   :EXPORT_FILE_NAME: krishna-in-the-mahabharat
   :EXPORT_HUGO_ALIASES: /mahabharat/2012-09-21-krishna-in-the-mahabharata/
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
   :END:
/Cross-posted from my answer to the question: [[http://www.quora.com/Mahabharata/Why-is-Lord-Krishna-called-the-master-of-finesse-in-the-Mahabharat/answer/Vedang-Manerikar][Why is Lord Krishna
called the master of finesse in the Mahabharat?]] on [[http://quora.com][Quora]]/

I will attempt to answer this, but my answer is going to be
controversial. Please keep in mind that it is not my intention to
offend anyone.
#+hugo: more

Alright, let's start with some ground rules. For the length of this
answer, consider that Krishna is not Lord Krishna, the god and that
the Mahabharat is not a religious text revered by millions. Instead,
let us analyze the Mahabharat as if it is a (ridiculously good)
fantasy story, and Krishna is a central character in this story.

*** Introduction and back-story

Krishna is introduced to us early on, as a cousin of the Pandavas. He
is accomplished, wise, and powerful in his own right (unlike Pandavas
or Kauravas at this point, who are squabbling children). This is
because he has overthrown Kamsa, the King of Surasena kingdom, native
land of the Yadavas. However, he has multiple problems of his own.
Firstly, he is a cowherd, not royalty. The Yadavas rule by council,
not by king. Thus, even though Krishna is the leader of the Yadavas,
he is not equal to royalty. Further, Kamsa was Jarasandh's Senapati.
Jarasandh is the emperor of India. Every other dynasty, including the
Kurus, pays obeisance to him. This doesn't leave Krishna with very
many allies. That Krishna is capable and a political genius (at such a
young age) is evident because Jarasandh has been unable to crush him
outright. But Krishna has now fought 18 wars with Jarasandh, and has
slowly lost territory to him. He has been forced to leave his land and
move to the island of Dwarka. He needs help.

Guess who else need help? The Pandavas. They are staking a claim to
the throne of Hastinapur on extremely untenable grounds: It is an open
secret that Pandu was impotent. Who then, are these children, arrived
from nowhere? Here is Krishna's opportunity. The Pandavas will oppose
Duryodhana, who is Dhritarashtra's son. Dhritarashtra is politically
aligned with Jarasandh. Thus, Pandavas are going against Jarasandh
himself. Krishna aligns himself with the Pandavas.

*** Jarasandh vadh and the Rajsuya yagna

I'll skip some details here, because I don't intend to reproduce the
Mahabharat entirely. Suffice to say that Krishna and Arjuna are the
closest of friends now. Krishna has helped Arjuna earn multiple
celestial weapons, he has convinced Drupad to let Draupadi marry the
Pandavas, he has orchestrated the building of the Mayasabha in
Indraprastha.

The Rajsuya yagna is his chance to strike against Jarasandh. He
convinces Yudhisthir that he needs to perform the yagna to establish
his supremacy over India. Who stands in Yudhishthir's way? The current
emperor of India, Jarasandh. So do they declare war on Magadh? No.
Krishna, Arjuna and Bhima sneak into Magadh, and challenge Jarasandh
to single combat. Bhima kills Jarasandh, after which Krishna installs
Jarasandh's son Sahadev onto the throne of Magadh. Thus, he eliminates
his biggest enemy, gains access to a sizeable army, and makes multiple
allies when he frees the political prisoners of Jarasandh. Who else
stands in his way? Shishupal, king of Chedi, his lifelong enemy, and
the Senapati of Jarasandh's army. Yudhishthir invites Shishupal to the
Rajsuya yagna. Krishna is the guest of honor for this yagna, over and
above celebrated people like Bhisma and Drona. Krishna lets Shishupal
berate and belittle him for a long time--long enough to convince
everyone that Shishupal is an asshole of the first degree. Then he
calmly beheads him. No battle, no challenge to fight to the death,
nothing. In a single stroke, in front of enough witnesses to assert
that Shishupal truly deserved it, the Senapati of Jarasandh is gone.

Who else is Krishna's enemy? Duryodhan, friend of Jarasandh, and a
political genius in his own right. Duryodhan has befriended Balaram,
Krishna's elder brother and the most important person on the Yadava
council after Krishna himself. Krishna did not foresee this, but
Balaram teaches the mace to Bhima and Duryodhana, and he is impressed
with Duryodhana. Duryodhan will not be so easy to eliminate. We will
deal with him later.

*** Subhadhra and Samba

Balaram promises Subhadhra to Duryodhana in marriage. If this comes to
pass, the two families will be much too closely linked for Krishna's
liking. Lucky then, that Arjuna is there to whisk her away.

However, this is one instance where Krishna's intentions do not come
to pass. Krishna's own son, Samba, is fool enough to fall in love with
Duryodhana's daughter Laxamani. He tries to whisk her away just like
Arjuna did with Subhadhra. However, he is no Arjuna, and Duryodhana is
no fool. He is caught and put behind bars. Duryodhana announces that
Samba will be put to death. Even in this situation, Krishna cannot
come to negotiate with Duryodhan. This is a political loss, he stands
to lose face. Instead he pleads with Balaram to go on his behalf.
Balaram successfully negotiates with Duryodhana, promising him support
in battle, and brings Samba and Laxamani back to Dwarka. The families
are intertwined. Krishna will face a much tougher task getting support
from the Yadavas against Duryodhana now.

*** Preparations for the Kurukshetra war

Krishna does not have an option. He is over-ruled by his council, and
pledges his army to Duryodhana. However he says that he will fight on
behalf of the Pandavas, because they have asked him for help too. He
makes it sound as innocuous as possible: "I will only be a charioteer.
I will not take up arms. I only wish to accompany my friend Arjuna.
What can little old me do?" And now Duryodhana makes a fatal mistake.
He underestimates Krishna. He agrees to Krishna's conditions.

Krishna plays his master-stroke early on. He is fully aware of the
capabilities of his army. If Balaram enters the battlefield on
Duryodhana's side, it is game over for the Pandavas. So Krishna
convinces Balaram that this war will be full of adharma (he is not
wrong on that count). A man of Balaram's accomplishments should not
taint his soul by participating in such a war. He should instead go on
a pilgrimage to the holy sites in India. _This_ is Krishna's greatest
political maneuver in the Mahabharat. With Balaram gone, Kritivarma
becomes the Senapati of the Yadava army. It is a testament to the
quality of Yadava soldiers that Kritivarma and Satyaki (who is the
only Yadava to fight for the Pandavas) are two of the 10 people to
survive the war.

When Krishna goes to Hastinapur to sue for peace, one last time, he
plays another closely guarded card. He takes Karna aside and tells him
of his parentage. He then tries to sway Karna by promises of power and
rule. He even offers Draupadi as a final perquisite. Karna turns him
down. Luckily for Krishna, Bhishma too has his own agenda. He knows
the truth of Karna's birth, and does not wish for him to fight his
brothers. So he insults Karna in the war council, and tells him he is
only fit to fight ardha-rathis. Karna swears not to enter the
battlefield until Bhishma falls. Thus the Pandavas are free of the
terror of Karna for 10 days. When Karna will finally enter the
battlefield on the 11th day, Krishna will try again. He will send
Kunti to Karna, to convince Karna to switch, and when that fails, to
beg for the lives of her sons. Thus, Krishna will ensure that 4 sons
of Kunti are safe from the wrath of Karna.

*** Machinations in the War

There are many, many things that Krishna does on the battlefield, but
most people are already aware of them. Quickly then, the highlights:

- Convince Arjuna to fight.
- Convince the Pandavas that Bhishma is slaughtering their armies and
  needs to fall
- Protect Arjuna from himself (the Abhimanyu/Jayadrath incident)
- Formulate and execute the plan to slay Drona (_naro va kunjaro va_)
- Tell the Pandavas how to counter Ashwatthama's multiple celestial
  weapons
- Stop the Pandavas from infighting on multiple occasions
  + When Dhrishtadyumna chops off Drona's head, Arjuna sees red.
  + When Karna defeats and humiliates Yudhisthir, Yudhisthir runs back
    to his tent. He blames Arjuna of incompetence in killing Karna
    with such vigor, that Arjuna pulls out Gandiva to kill Yudhishthir
    himself. Krishna cools things down.
- Use Ghatotkach as a pawn to rid Karna of his celestial Shakti.
  + When Ghatotkach dies, the Pandava camp is in mourning. Not Krishna
    though. He dances in joy, claiming that "finally, Karna is
    surmountable"
- Convince Arjuna to kill Karna when he is unarmed and on foot
- Gesture Bhima to hit Duryodhana in the thigh, blatantly against the
  rules of mace battle.
- Stop Balaram from slaughtering Bhima on the spot for cheating.
  + Balaram is back from his pilgrimage in time to watch the battle
    between Duryodhana and Bhima. Krishna has to hold him in a bear
    hug when Bhima breaks Duryodhana's thigh.

In summary, the Pandavas are bumbling fools who do not stand a
snowball's chance in hell without Krishna to guide them on every step.
In return, they revere Krishna, and proclaim that he is their god,
their spiritual leader. Krishna enters the fray to be royalty, ends up
becoming a God.

** DONE Draupadi and the Pandavas                 :krishna:pandavas:draupadi:
   CLOSED: [2012-09-21 Fri 19:17]
   :PROPERTIES:
   :EXPORT_FILE_NAME: draupadi-and-the-pandavas
   :EXPORT_HUGO_ALIASES: /mahabharat/2012-09-21-draupadi-and-the-pandavas/
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
   :END:
/Cross-posted from my answer to the question: [[http://www.quora.com/Mythology/What-was-the-relationship-between-Draupadi-and-the-Pandavas-like/answer/Vedang-Manerikar][What was the
relationship between Draupadi and the Pandavas like?]] on [[http://quora.com][Quora]]/

Draupadi's relationship with the Pandavas is complex and at the heart
of the Mahabharat.
#+hugo: more
*** Draupadi and Arjuna

Let's jump right in with the most important relationship: Draupadi and
Arjuna.

Of the five Pandavas, Draupadi favors Arjuna the most. She is in love
with him, whereas the others are in love with her. Arjuna has won her
in the Swayamvar, Arjuna is her Lord, and she is devoted to
him. [fn:1]

On the other hand, she is not Arjuna's favorite wife. Arjuna does not
like sharing her with 4 other men (conjecture on my part). Arjuna's
favorite wife is Subadhra, Krishna's half-sister. He also dotes on
Abhimanyu (his son with Subadhra) over and above his sons from
Draupadi and Chitrangada (Here is a quick question: Can you name his
sons from Draupadi and Chitrangada? Off the top of your head?
Exactly). All of Draupadi's husbands married other women, but the only
time Draupadi gets upset and distraught is when she learns of Arjuna's
marriage to Subadhra. Subadhra has to go to Draupadi dressed as a
maid, just to assure her that she (Subadhra) will always be beneath
Draupadi in status. [fn:2]

*** Draupadi and Yudhisthir

Now let's see the reason why Draupadi's life is a shambles, why she is
the most cursed woman of her time, and one of the most important
reasons behind the Mahabharat war: Draupadi's marriage to Yudhisthir.

Here is something we need to understand first: Yudhisthir is a
bastard. This is not to be held against him - all Mahabharat
characters are gray - but people tend to forget this bit. Yudhisthir
_does not_ win Draupadi in the Swayamvar, he has no right to her. He
lusts for her, he cannot bear seeing her everyday and not be able to
have her. So he takes a small chance that fate throws his way, when
Kunti says, "Share whatever you have between yourselves", and bullies
Draupadi and his brothers into the weird "Lets all marry her"
situation. Bhima does not like this, he claims that it is not right
and that people will laugh at them. Yudhisthir tells him of Rishis who
have done this before, and that it is accepted in Dharma.[fn:3] He
then rushes forward and says that since he is the eldest, he must get
"first dibs" with Draupadi. (Sorry to be crude here, but I tell it
like I read it.) The brothers marry her according to age, eldest to
youngest.

Then, Yudhisthir calls an assembly with his brothers and tells them
the story of 2 powerful rakshasas, Sunda and Upasunda [fn:4], whose
love for the same woman led them to destroy each other. He says that
the lesson to learn here is that the brothers must be careful when
sharing Draupadi. She must be with one brother for a set period of
time, and during this period the other brothers cannot touch her
(carnally, that is). Yudhisthir decides that Draupadi will live for 1
year with each brother and that since he is the eldest, she will start
the cycle with him.

Yudhisthir doesn't stop with this. He knows that Draupadi loves
Arjuna. He does not want her to tempt him into breaking the rules.
Hence he says that the brother who breaks this rule will have to go
into exile for 12 years (seriously?). Further, the same punishment
will apply if any brother happens to disturb another when he is
carnally engaged with Draupadi. Ouch. This punishment actually comes
into play when Arjuna disturbs Yudhisthir and Draupadi. Arjuna has to
retrieve his weapons from the armory, in order to help a poor Brahmin
whose cows have been stolen by thieves. Guess where Yudhisthir and
Draupadi are doing it? That's right. The Armory.[fn:5]

Arjuna departs on his 12 year tour of India, where he visits his
father Indra, gets cursed by Urvashi, learns a lot of new skills from
multiple teachers (Shiva, Indra etc), meets and marries Subadhra,
followed by Chitrangada, etc. However, what happens to the year that
he is to spend with Draupadi? It reverts back to Yudhisthir, who
promises to care for Draupadi on Arjuna's behalf. Naturally.

*** Draupadi and Bhima

After that morose tale of manipulation, let's visit to a slightly more
cheerful tale of manipulation: Draupadi and Bhima

Bhima is silly putty in Draupadi's hands. Of all her husbands, he is
the one who loves her the most. He fulfills her every request, he
cannot bear to see her hurt.

Who brings her flowers from Kuber's garden? Bhima. Who cries because
his beautiful wife will have to serve as a Sairandhri (maid) to Queen
Sudeshna of Matsya? Bhima. Who kills a 100 Kauravas to avenge the
insult to Draupadi? Bhima. Who does Draupadi run to when she is
molested by Keechak in Matsya kingdom? Bhima.

The other Pandavas are not under Draupadi's thumb. She is prone to
outbursts of rage, she makes unreasonable, unwise demands. When she
wants Keechak killed for molesting her, Yudhisthir tells her that it
would expose their presence in Matsya kingdom, and advises her to
"live with it". (Model husband that). Bhima simply walks up to Keechak
in the middle of the night and tears him limb from limb. No questions
asked.[fn:6]

Draupadi shows us Bhima's human side. He is a savage monster with
others, but he is always and only tender when it comes to Draupadi.

*** Draupadi with Nakul and Sahadev

As with most of the Mahabharat, Nakul and Sahadev don't really matter
here. I haven't read any version of the Mahabharat where Nakul and
Sahadev have any role of substance. In reality, Nakul and Sahadev are
more loyal to Yudhisthir than anyone else. They don't share father or
mother with Yudhisthir, yet they follow him everywhere and do exactly
as he asks. They could have gone and ruled over Madradesh (their
birthright through Madri), and lived a life of luxury and ease, but
they stuck with their brother through thick and thin. Makes one
appreciate them a little bit more.

In summary, Draupadi's curse is the curse of beauty. She is the object
of every man's lust, but no one cares much for what she desires or
feels. Her husbands gamble her away as if she were property. When
Dusshasana strips her in view of a full court, she has to beg Krishna
to save her. Her husbands don't lift a finger. Even at the end of
their 13 year exile, the Pandavas are not intent on war. They worry
that the losses in the Kurukshetra war will be too big to warrant it.
Draupadi has to turn to her friend, Krishna, to heal her soul. Krishna
promises her:[fn:7]

#+begin_quote
"Soon wilt thou, O Draupadi, behold the ladies of Bharata's race weep
as thou dost. Even they, O timid one, will weep like thee, their
kinsmen and friends being slain. They with whom, O lady, thou art
angry, have their kinsmen and warriors already slain.... I will
accomplish all this."
#+end_quote

And thus comes about the Mahabharat war.

*** Some references for further reading, clarification:

[fn:1]: [[http://pastebin.com/bgbrjnne][Draupadi favors Arjuna]]. Note that it is Bhima who questions
why Draupadi fell, not Arjuna.
[fn:2]: [[http://pastebin.com/ngMNJiFP][Subadhra pacifies Draupadi]]
[fn:3]: [[http://pastebin.com/TiW5w3zi][Conformable to virtue]]. Note his sentence construction: "My mother commands it, and my heart approves"
[fn:4]: [[http://pastebin.com/WbMLtEmM][The Story of Sunda and Upasunda]].
[fn:5]: [[http://pastebin.com/qvBBEB52][Arjun Vanavasa]].
[fn:6]: [[http://pastebin.com/REfrvaWy][Keechak Vadha]]. If you don't read any of the other footnotes, read this one. It throws light on the true nature of Yudhisthir and Bhima.
[fn:7]: [[http://pastebin.com/fxTzA7Dc][Krishna promises revenge]]. Read this too, because Krishna is awesome.
** DONE Notes and Reading Material on the Mahabharata                 :books:
   CLOSED: [2012-09-21 Fri 20:55]
   :PROPERTIES:
   :EXPORT_FILE_NAME: notes-and-reading-material-on-the-mahabharat
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
   :EXPORT_HUGO_ALIASES: /mahabharat/2012-09-21-notes-and-reading-material-on-the-mahabharata/
   :END:
/Cross-posted from my note: [[http://www.quora.com/Vedang-Manerikar/The-Mahabharata/Notes-and-Reading-material-on-the-Mahabharata][Notes and Reading Material on the
Mahabharata]] on [[http://quora.com][Quora]]/

People have shown some interest in reading material for the
Mahabharata, this post should save me from repeatedly typing the same
things.
#+hugo: more

*** Introductory books

These books are straight-forward narrations of the Mahabharata. They
introduce the reader to all the major characters and plot turns. In my
experience, people are not even aware of the major players in the
Mahabharata. To them, it's simply the story of 5 good Pandavas vs 100
evil Kauravas. If you have never read the Mahabharata, or are unsure
about what you have read, one of these books is a good place to start.

- *The Mahabharata - Amar Chitra Katha. [English, Comic]*: This book,
  accompanied by my grandfather's stories, is my introduction to the
  Mahabharata. If you read this book, be sure to also read one of the
  two other books listed here. This book is a bit too simplistic, it's
  here because of nostalgic value.

- *The Mahabharata - Ramesh Menon [English]*

- *The Mahabharata - Kamala Subramaniam [English]*: I recommend
  reading this book.

*** Point of View (POV) Narrations

Now we come to the interesting part of the Mahabharata. If you choose
to abandon a Sanjaya-esque all-knowing view of the Mahabharata, and
read it from the point of view of a single character as it interacts
with the Mahabharata world, you will discover that every character was
right in every action they took. This is the real beauty of the
Mahabharata. The whole is greater than the sum of it's parts. The
characters behave as human beings would behave. They make decisions
based on incomplete/incorrect knowledge. They are driven by lust,
ambition, revenge and other human emotions. Unfortunately, I've come
across precious few English books that take this approach. The bulk of
the great writing related to the Mahabharata is in regional languages.
(In my case, Marathi, my mother-tongue)

- *Bhimsen - Prem Panicker [English]*: (from the POV of Bhima) This
  book is a loose English translation of M. T. Vasudevan Nair's
  Malayalam master-piece Randaamoozham (meaning 'Second Turn'). It is
  freely available on the Internet. (I recommend reading this book)

- *Mrityunjaya - Shivaji Sawant [Marathi]* 'Conqueror of Death' (from
  the POV of Karna)

- *Dhananjaya - Rajendra Kher [Marathi]* 'Conqueror of wealth', one of
  Arjuna's names. (from the POV of Arjuna)

- *Duryodhana - Kaka Vidhate [Marathi]* (from the POV of Duryodhana)
  (I recommend reading this book)

- *Yugandhar - Shivaji Sawant [Marathi]* 'Leader of an Era' (from the
  POV of Krishna) (I recommend reading this book)

- *Radheya - Ranjit Desai [Marathi]* 'Son of Radha' (from the POV of
  Karna)

- *Parva - S L Bhyrappa [Kannada]* A masterful retelling of the
  Mahabharata that eliminates all divine elements. I read the Marathi
  translation, which was brilliant. I assume the original work is even
  better.

*** Short stories and analyses. (Intermediate level)

We should now turn to books that explain the Mahabharata (or parts of
it) in detail.

- *Yugant - Irawati Karve [Marathi]* 'The End of an Era' (I recommend
  reading this book). The English translation of this book is also
  written by Prof. Karve herself and is very good.

- *Jaya - Devadutt Pattanaik [English]* 'Victory'

- *Karna khara kon hota? - Daji Panashikar [Marathi]* 'Who was Karna?'

- *Kapatneeti - Daji Panashikar [Marathi]* 'Politics of treachery'

*** Short stories and analyses. (Expert Level)

I've separated these books from those in the previous section because
I think they are better books. This is my personal opinion.

- *Mahabharat: Ek Sudacha Pravas - Daji Panashikar [Marathi]* 'A
  Journey of Revenge' (I recommend reading this book)

- *The Lore of Mahabharata - Amaleśa Bhaṭṭācārya [English]*
  (Translated from the original in Bengali) (I recommend reading this
  book)

*** Don't touch these books with a 10-foot pole (Personal Opinion)

These books are utter bunkum. Do yourself a favor and don't read them.

- *The Mahabharat - C Rajgopalachari [English]* This book is the
  number one reason why people think of the Mahabharat as 5 good
  Pandavas vs 100 evil Kauravas. Throw it away if you have a copy.

- *Palace of Illusions - Chitra Banerjee Divakaruni [English]* I hate
  this book. Here is a balanced review of this book, one which I agree
  with: [[http://jaiarjun.blogspot.in/2008/04/palace-of-illusions-good-bad-and.html][Palace of Illusions: The Good, Bad and Ugly]] Jai Arjun Singh
  has been kind to it. We consider books sacred in my house, so I
  didn't burn it, but I gave it away as fast as I could when I
  finished reading it.

*** The Reference Book

*Kisari Mohan Ganguly* [1883-1896] translated the Sanskrit texts into
English word-for-word. He has done a great service to idiots like me,
providing a ready reference that I can look up anytime I want. You can
find the translated text here: [[http://www.sacred-texts.com/hin/maha/mahatxt.zip][The Mahabharata]]

You can also find the entire text of the Mahabharata in Sanskrit here
(Note: this is not the *critical edition* printed by BORI, which is
considered the authoritative version): [[http://www.sacred-texts.com/hin/mbs/index.htm][The Mahabharata - Sanskrit]]

*** Books I want to read

These books are gems in Mahabharata literature (from what I've heard),
and they are all inaccessible to me either because they are out of
print or because they are in an unknown language. If someone has read
one of these books and is willing to explain the salient points to me,
I will pay for dinner and drinks.

- *Yajnaseni - Pratibha Ray [Oriya]* 'Daughter of Fire' (from the POV
  of Draupadi)

- *Ini ñān ur̲aṅṅaṭṭe - P Kesavan Balakrishnan [Malayalam]* 'And now
  let me sleep' (from the POV of Draupadi AND Karna - interleaving
  sections)

- *Randaamoozham - M.T. Vasudevan Nair [Malayalam]* 'The Second Turn'
  (from the POV of Bhima)

- *The Stone Women and other stories - Shashi Deshpande [English]*

- *Krishnavatara - Dr K M Munshi [Hindi]* (on the life of Krishna)

*** Crowd-sourced Books

- *Jyeshtha - Anant Manohar [Marathi]* 'Eldest' From the POV of
  Yudhishthira (Suggested by Sushrut Bidwai)

- *The Mahabharata - Bibek Debroy [English]* (Suggested by Makarand
  Sahasrabuddhe)

- *Vyasaparva - Durgabai Bhagwat [Marathi]* (Suggested by Aditya
  Kulkarni)

- *Mahabharata na Patro - Moolshanker Bhatt [Gujrathi]* (Suggested by
  Rachana Sudharshan) A series of stories from the POV of various
  characters
