<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>engineering-management on Vedang Manerikar</title><link>https://vedang.me/tags/engineering-management/</link><description>Recent content in engineering-management on Vedang Manerikar</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 Aug 2020 18:11:52 +0530</lastBuildDate><atom:link href="https://vedang.me/tags/engineering-management/index.xml" rel="self" type="application/rss+xml"/><item><title>Gene Kim: The Four Types of Work</title><link>https://vedang.me/notes/gene-kim-the-four-types/</link><pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate><guid>https://vedang.me/notes/gene-kim-the-four-types/</guid><description>Snippet from: The Phoenix Project, along with my own notes
Business Projects &amp;ldquo;Feature Work&amp;rdquo;. This is the most visible type of work. Internal IT Projects Release Automation, QA Automation, Developer Tooling and other internal enablers. Mostly un-tracked and invisible, but crucial to long-term success. Updates and Changes Generally generated from above to categories of work. Introduces delay as breadth of existing surface area increases. Unplanned Work Fire-fighting at all levels of the company.</description></item><item><title>Gene Kim: The Three Ways of doing excellent Work</title><link>https://vedang.me/notes/gene-kim-the-three-ways/</link><pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate><guid>https://vedang.me/notes/gene-kim-the-three-ways/</guid><description>Snippet from: The Phoenix Project, along with my own notes
Flow Maximizing the rate of flow of work is the key to success. Limiting the work in progress is the fastest way to achieve Flow. Fast Feedback Setup systems to get fast feedback at every stage of work, from concept through shipping to maintaining in production. Experimentation and Learning Keep dedicated time for experiments, at every level of the company.</description></item><item><title>Writing a good status update</title><link>https://vedang.me/blog/writing-a-good-status-update/</link><pubDate>Tue, 06 Aug 2019 07:49:00 +0530</pubDate><guid>https://vedang.me/blog/writing-a-good-status-update/</guid><description>We share written status updates within the team on a weekly basis (every Monday). I wrote this article to explain what these status updates should look like, and I think it&amp;rsquo;s useful enough to publish publicly. Here goes:
What is the purpose of status updates? Let your manager know what you have achieved last week. Let your co-workers know what you have achieved this week. Reflect on your progress and pace yourself.</description></item><item><title>Lazy Weekend Viewing: GOJEK's 10x Engineer - Truth or Myth?</title><link>https://vedang.me/notes/gojek-10x-engineering/</link><pubDate>Sat, 20 Jul 2019 07:39:00 +0530</pubDate><guid>https://vedang.me/notes/gojek-10x-engineering/</guid><description>&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>Engineering quality is paramount. Focus on &lt;a href="https://dave.cheney.net/2019/07/09/clear-is-better-than-clever">clean and clear code&lt;/a>.
Code is the primary medium of communication for any engineer.
Write beautiful code and hold people to high standards.&lt;/li>
&lt;li>Adding head count has vast hidden costs and often brings down
output. The reason for this is the exponential increase in
communication required to align everyone to common goals.&lt;/li>
&lt;li>Similarly, pods cannot scale unless they can own small,
independent components.&lt;/li>
&lt;li>Monoliths are normal and good when the company is small.
Refactoring the monolithic model into different components allows
us to scale pods and org.&lt;/li>
&lt;li>Carve monoliths only when it hits critical mass. Then, identify
the pain and pull it out into it&amp;rsquo;s own pod.&lt;/li>
&lt;li>&amp;ldquo;Relationship as a service&amp;rdquo; or &amp;ldquo;Please get this done for me over
and above other stuff on your plate&amp;rdquo;
&lt;ul>
&lt;li>&amp;ldquo;Traffic congestion&amp;rdquo; (A team which is too busy) and structural
failure can lead to the impression that the system is
bureaucratic and political.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Criteria when hiring Engineers
&lt;ul>
&lt;li>Computer science (Can computers understand your code?)
&lt;ul>
&lt;li>Ability to grasp large complex systems&lt;/li>
&lt;li>Understanding of implications of design choices on that system.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Software Engineering (Can humans understand your code?)
&lt;ul>
&lt;li>How well do you communicate through your code? This is the
metric that enables building &lt;strong>good&lt;/strong> systems.&lt;/li>
&lt;li>The hygiene you show in code is the hygiene you will enforce
on others.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Good behavioral traits (Can you grow?)
&lt;ul>
&lt;li>Curious&lt;/li>
&lt;li>Wants to learn&lt;/li>
&lt;li>Can accept feedback&lt;/li>
&lt;li>&amp;ldquo;Strong opinions, Weakly held.&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;Pride without attachment.&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Find the full video &lt;a href="https://www.youtube.com/watch?v=He0XBBfCEVk">here&lt;/a>!&lt;/li>
&lt;li>The rest of this post is detailed notes on the video&lt;/li>
&lt;/ul></description></item></channel></rss>