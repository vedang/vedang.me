<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>clojure on Vedang Manerikar</title><link>https://vedang.me/tags/clojure/</link><description>Recent content in clojure on Vedang Manerikar</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Oct 2020 23:18:00 +0530</lastBuildDate><atom:link href="https://vedang.me/tags/clojure/index.xml" rel="self" type="application/rss+xml"/><item><title>How to use the Clojure REBL with Leiningen, Cider and Emacs</title><link>https://vedang.me/blog/clj-rebl-lein-cider-emacs/</link><pubDate>Wed, 28 Oct 2020 23:18:00 +0530</pubDate><guid>https://vedang.me/blog/clj-rebl-lein-cider-emacs/</guid><description>Note: This set of instructions only work on Clojure 1.10+, Lein 2.9+ and JDK 11+. Also, REBL requires a license for commercial use.
I didn&amp;rsquo;t find a handy reference to getting started with REBL if your primary workflow is Leiningen/nrepl, so here is the series of things I had to do to get the REBL up and running for myself.
Download the REBL jar from Cognitect.
Use lein-localrepo to install the REBL jar to your m2.</description></item><item><title>Lazy Weekend Reading: A love letter to Clojure</title><link>https://vedang.me/notes/love-letter-to-clojure/</link><pubDate>Sun, 13 Oct 2019 23:02:00 +0530</pubDate><guid>https://vedang.me/notes/love-letter-to-clojure/</guid><description>I had no idea that Gene Kim, author of three books that have garnered wide-spread public acclaim, was doing Clojure programming. (They are DevOps Handbook, Phoenix Project, and Accelerate &amp;ndash; we&amp;rsquo;ve ordered them recently for the Helpshift Library). He published a love-letter to Clojure this weekend, and I think it is an absolute must-read for all programmers (whether you write Clojure or not). The blog-post covers the following areas:
General software philosophy Choose tools that are good to think with Most bugs are due to programmers not understanding all the possible states their code may execute in.</description></item><item><title>Simulating the Passport Seva Kendra using Clojure</title><link>https://vedang.me/blog/simulating-the-passport-seva-kendra/</link><pubDate>Sat, 15 Dec 2018 19:56:00 +0530</pubDate><guid>https://vedang.me/blog/simulating-the-passport-seva-kendra/</guid><description>&lt;p>&lt;em>Cross-posted from my post on the &lt;a href="https://medium.com/helpshift-engineering/simulating-the-passport-seva-kendra-using-clojure-fd88c12dde8c">Helpshift Engineering Blog&lt;/a>&lt;/em>&lt;/p>
&lt;p>A year ago, I went to the Passport Seva Kendra (PSK) in Mundhwa, Pune
to get my passport renewed. At the time, the government had revamped
this process and made it a simple, step-in/step-out painless affair.
Unfortunately for me, I hit an edge-case in the system and took much
longer than expected to complete. I was there for close to 4 hours. I
used this time to observe the behavior of the PSK and think about
ways to improve the applicant experience. I thought it was an
interesting problem to solve and write about.&lt;/p>
&lt;p>Recently, my wife booked an appointment at the PSK to renew &lt;span class="underline">her&lt;/span>
passport and this provided the spark I needed to write about it. So
here we are, a year later, talking about the passport renewal process
at the PSK.&lt;/p></description></item><item><title>Composability and Compojure</title><link>https://vedang.me/blog/composability-and-compojure/</link><pubDate>Thu, 23 Feb 2012 23:58:00 +0530</pubDate><guid>https://vedang.me/blog/composability-and-compojure/</guid><description>&lt;p>&lt;em>Caveat&lt;/em>: This post needs some rudimentary knowledge of Compojure.
Compojure is a web framework for Clojure, and if you don&amp;rsquo;t understand
what that means, then you should probably head over to the
&lt;a href="https://github.com/weavejester/compojure/wiki">Compojure docs&lt;/a>.&lt;/p>
&lt;p>Compojure exposes us to a beautifully &lt;span class="underline">composable&lt;/span> abstraction, and
this post is an attempt to show why that is a great thing.&lt;/p></description></item></channel></rss>