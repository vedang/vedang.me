<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Vedang Manerikar</title>
    <link>https://vedang.me/tags/programming/</link>
    <description>Recent content in programming on Vedang Manerikar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Aug 2020 18:11:52 +0530</lastBuildDate>
    
	<atom:link href="https://vedang.me/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Doug McIlroy: the UNIX philosophy</title>
      <link>https://vedang.me/notes/doug-mcilroy-unix-philosophy/</link>
      <pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate>
      
      <guid>https://vedang.me/notes/doug-mcilroy-unix-philosophy/</guid>
      <description>Snippet from: The Art of Unix Programming
  Make each program do one thing well. To do a new job, build afresh rather than complicate old programs by adding new features.
  Expect the output of every program to become the input to another, as yet unknown, program. Don&amp;rsquo;t clutter output with extraneous information. Avoid stringently columnar or binary input formats. Don&amp;rsquo;t insist on interactive input.
  Design and build software, even operating systems, to be tried early, ideally within weeks.</description>
    </item>
    
    <item>
      <title>ESR: the UNIX Philosophy</title>
      <link>https://vedang.me/notes/esr-unix-philosophy/</link>
      <pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate>
      
      <guid>https://vedang.me/notes/esr-unix-philosophy/</guid>
      <description>Snippet from: The Art of Unix Programming
 Rule of Modularity Write simple parts connected by clean interfaces. Rule of Clarity Clarity is better than cleverness. Rule of Composition Design programs to be connected to other programs. Rule of Separation Separate policy from mechanism; separate interfaces from engines. Rule of Simplicity Design for simplicity; add complexity only where you must. Rule of Parsimony Write a big program only when it is clear by demonstration that nothing else will do.</description>
    </item>
    
    <item>
      <title>Rob Pike: Rules of Programming</title>
      <link>https://vedang.me/notes/rob-pike-rules/</link>
      <pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate>
      
      <guid>https://vedang.me/notes/rob-pike-rules/</guid>
      <description>Snippet from: Notes on C Programming
 No Speed Hacks You can&amp;rsquo;t tell where a program is going to spend its time. Bottlenecks occur in surprising places, so don&amp;rsquo;t try to second guess and put in a speed hack until you&amp;rsquo;ve proven that&amp;rsquo;s where the bottleneck is. Measure before tuning Don&amp;rsquo;t tune for speed until you&amp;rsquo;ve measured, and even then don&amp;rsquo;t unless one part of the code overwhelms the rest. No Fancy Algorithms Fancy algorithms are slow when n is small, and n is usually small.</description>
    </item>
    
    <item>
      <title>Tim Peters: The Python Way</title>
      <link>https://vedang.me/notes/tim-peters-the-python-way/</link>
      <pubDate>Sat, 22 Aug 2020 18:11:52 +0530</pubDate>
      
      <guid>https://vedang.me/notes/tim-peters-the-python-way/</guid>
      <description>Snippet from: The Python Mailing List
  Beautiful is better than ugly.
  Explicit is better than implicit.
  Simple is better than complex.
  Complex is better than complicated.
  Flat is better than nested.
  Sparse is better than dense.
  Readability counts.
  Special cases aren&amp;rsquo;t special enough to break the rules.
  Although practicality beats purity.
  Errors should never pass silently.</description>
    </item>
    
    <item>
      <title>The Programmer&#39;s Guide to Wisdom</title>
      <link>https://vedang.me/tinylog/programmer-guide/</link>
      <pubDate>Sat, 22 Aug 2020 17:15:00 +0530</pubDate>
      
      <guid>https://vedang.me/tinylog/programmer-guide/</guid>
      <description>This poster captures timeless advice on programming, I keep a copy on my desk to read whenever I can.
Over the weekend, I created a poster for my desk. It captures timeless best practices and advice on programming and software design. Presenting it here, in the hopes that it&amp;#39;ll be useful to others as well. Features: @esrtweet, Doug McIlroy, @rob_pike and @RealGeneKim pic.twitter.com/Lj2kUqwq2J
&amp;mdash; Vedang Manerikar (@vedang) August 10, 2020  I collect such deeply useful and universal advice under the tag wisdom, if you want to read more posts of this kind.</description>
    </item>
    
    <item>
      <title>Lazy Weekend Viewing: Preventing the collapse of civilization</title>
      <link>https://vedang.me/notes/preventing-the-collapse-of-civilization/</link>
      <pubDate>Sun, 12 Apr 2020 18:20:00 +0530</pubDate>
      
      <guid>https://vedang.me/notes/preventing-the-collapse-of-civilization/</guid>
      <description>&amp;ldquo;Preventing the Collapse of Civilization&amp;rdquo; is an excellent talk by Jonathan Blow (of Braid fame) at DevGAMM 2019. It&amp;rsquo;s inspiring and I recommend you make the time to see it. My notes below:
Summary  It is a myth that technology only advances. We&amp;rsquo;ve often seen significant backward slides in tech. (Lots of examples to illustrate this point) Software is in decline. Both software robustness and programmer productivity is declining. (Lots of examples to illustrate this point) We need to fight complexity and strive for simplicity in every step if we want to battle degradation and loss of capability.</description>
    </item>
    
    <item>
      <title>Simulating the Passport Seva Kendra using Clojure</title>
      <link>https://vedang.me/blog/simulating-the-passport-seva-kendra/</link>
      <pubDate>Sat, 15 Dec 2018 19:56:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/simulating-the-passport-seva-kendra/</guid>
      <description>&lt;p&gt;&lt;em&gt;Cross-posted from my post on the &lt;a href=&#34;https://medium.com/helpshift-engineering/simulating-the-passport-seva-kendra-using-clojure-fd88c12dde8c&#34;&gt;Helpshift Engineering Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A year ago, I went to the Passport Seva Kendra (PSK) in Mundhwa, Pune
to get my passport renewed. At the time, the government had revamped
this process and made it a simple, step-in/step-out painless affair.
Unfortunately for me, I hit an edge-case in the system and took much
longer than expected to complete. I was there for close to 4 hours. I
used this time to observe the behavior of the PSK and think about
ways to improve the applicant experience. I thought it was an
interesting problem to solve and write about.&lt;/p&gt;
&lt;p&gt;Recently, my wife booked an appointment at the PSK to renew &lt;span class=&#34;underline&#34;&gt;her&lt;/span&gt;
passport and this provided the spark I needed to write about it. So
here we are, a year later, talking about the passport renewal process
at the PSK.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Composability and Compojure</title>
      <link>https://vedang.me/blog/composability-and-compojure/</link>
      <pubDate>Thu, 23 Feb 2012 23:58:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/composability-and-compojure/</guid>
      <description>&lt;p&gt;&lt;em&gt;Caveat&lt;/em&gt;: This post needs some rudimentary knowledge of Compojure.
Compojure is a web framework for Clojure, and if you don&amp;rsquo;t understand
what that means, then you should probably head over to the
&lt;a href=&#34;https://github.com/weavejester/compojure/wiki&#34;&gt;Compojure docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Compojure exposes us to a beautifully &lt;span class=&#34;underline&#34;&gt;composable&lt;/span&gt; abstraction, and
this post is an attempt to show why that is a great thing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Switch Statements in Python</title>
      <link>https://vedang.me/blog/switch-statements-in-python/</link>
      <pubDate>Sun, 07 Aug 2011 13:21:00 +0530</pubDate>
      
      <guid>https://vedang.me/blog/switch-statements-in-python/</guid>
      <description>&lt;p&gt;Today I went through some old Python code and noticed this pattern
through out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;response, data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; somefunc()
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;this&amp;#34;&lt;/span&gt;:
    do_this_with(data)
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;that&amp;#34;&lt;/span&gt;:
    do_that_with(data)
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;huh&amp;#34;&lt;/span&gt;:
    duh(data)
    ;; lots more elifs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    prevent_horrible_crash(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code should ideally have been a switch-case, but Python does not
support a &lt;code&gt;switch&lt;/code&gt; statement.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>